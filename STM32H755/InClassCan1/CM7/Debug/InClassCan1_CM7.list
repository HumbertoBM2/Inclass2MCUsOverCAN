
InClassCan1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007098  08007098  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a0  080070a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  080070a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2400007c  08007124  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000254  08007124  00020254  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001520e  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  000352b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000376d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000385f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b366  00000000  00000000  00039428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012636  00000000  00000000  0007478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018678d  00000000  00000000  00086dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  0020d5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e90 	.word	0x08006e90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08006e90 	.word	0x08006e90

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <main+0x108>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa81 	bl	8000ce0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fc75 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f881 	bl	80008e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <main+0x108>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <main+0x108>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <main+0x108>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fec5 	bl	8002594 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fedb 	bl	80025c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <main+0x108>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fa53 	bl	8000ce0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f9cf 	bl	8000bdc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800083e:	f000 f8cd 	bl	80009dc <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f97f 	bl	8000b44 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*AAO+*/
  printf("Welcome to the CANbus!!!\n\r");
 8000846:	481d      	ldr	r0, [pc, #116]	; (80008bc <main+0x10c>)
 8000848:	f005 fb94 	bl	8005f74 <iprintf>
  while (1) {
      // Receiving message from Arduino
      if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <main+0x110>)
 800084e:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <main+0x114>)
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <main+0x118>)
 8000854:	f001 f8e8 	bl	8001a28 <HAL_FDCAN_GetRxMessage>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d119      	bne.n	8000892 <main+0xe2>
          printf("\n\rReceived from Arduino - ID: 0x%lx, Data: ", RxHeader.Identifier);
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <main+0x114>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4819      	ldr	r0, [pc, #100]	; (80008cc <main+0x11c>)
 8000866:	f005 fb85 	bl	8005f74 <iprintf>

          for (int i = 0; i < 8; i++) {
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	e00a      	b.n	8000886 <main+0xd6>
              printf("0x%X ", RxData[i]);
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <main+0x110>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <main+0x120>)
 800087c:	f005 fb7a 	bl	8005f74 <iprintf>
          for (int i = 0; i < 8; i++) {
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b07      	cmp	r3, #7
 800088a:	ddf1      	ble.n	8000870 <main+0xc0>
          }

          printf("\n\rMessage Received from Arduino\n\r");
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <main+0x124>)
 800088e:	f005 fb71 	bl	8005f74 <iprintf>
      }

      // Sending message to Arduino
      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <main+0x128>)
 8000894:	4911      	ldr	r1, [pc, #68]	; (80008dc <main+0x12c>)
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <main+0x118>)
 8000898:	f001 f86a 	bl	8001970 <HAL_FDCAN_AddMessageToTxFifoQ>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <main+0xfa>
          printf("Message Sent to Arduino Successfully!\n\r");
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <main+0x130>)
 80008a4:	f005 fb66 	bl	8005f74 <iprintf>
 80008a8:	e002      	b.n	80008b0 <main+0x100>
      } else {
          printf("Error Sending Message to Arduino...\n\r");
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <main+0x134>)
 80008ac:	f005 fb62 	bl	8005f74 <iprintf>
      }

      HAL_Delay(100);
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f000 fc9d 	bl	80011f0 <HAL_Delay>
      if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80008b6:	e7c9      	b.n	800084c <main+0x9c>
 80008b8:	58024400 	.word	0x58024400
 80008bc:	08006ea8 	.word	0x08006ea8
 80008c0:	24000234 	.word	0x24000234
 80008c4:	2400020c 	.word	0x2400020c
 80008c8:	24000098 	.word	0x24000098
 80008cc:	08006ec4 	.word	0x08006ec4
 80008d0:	08006ef0 	.word	0x08006ef0
 80008d4:	08006ef8 	.word	0x08006ef8
 80008d8:	24000008 	.word	0x24000008
 80008dc:	240001e8 	.word	0x240001e8
 80008e0:	08006f1c 	.word	0x08006f1c
 80008e4:	08006f44 	.word	0x08006f44

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fb34 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fb2e 	bl	8005f64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000908:	2004      	movs	r0, #4
 800090a:	f001 fe71 	bl	80025f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <SystemClock_Config+0xec>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <SystemClock_Config+0xec>)
 8000918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <SystemClock_Config+0xec>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <SystemClock_Config+0xf0>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <SystemClock_Config+0xf0>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <SystemClock_Config+0xf0>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000940:	bf00      	nop
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <SystemClock_Config+0xec>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094e:	d1f8      	bne.n	8000942 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000954:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	2302      	movs	r3, #2
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000966:	2314      	movs	r3, #20
 8000968:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800096e:	2304      	movs	r3, #4
 8000970:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000976:	230c      	movs	r3, #12
 8000978:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800097a:	2302      	movs	r3, #2
 800097c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fe8c 	bl	80026a4 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000992:	f000 f9a5 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	233f      	movs	r3, #63	; 0x3f
 8000998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099a:	2303      	movs	r3, #3
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 faa0 	bl	8002f00 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009c6:	f000 f98b 	bl	8000ce0 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	; 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58024800 	.word	0x58024800
 80009d8:	58000400 	.word	0x58000400

080009dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009e2:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 80009e4:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <MX_FDCAN1_Init+0x15c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009e8:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009ee:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009f4:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009fa:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000a00:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000a0c:	4b49      	ldr	r3, [pc, #292]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a14:	221f      	movs	r2, #31
 8000a16:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a24:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a30:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a8a:	482a      	ldr	r0, [pc, #168]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000a8c:	f000 fcc4 	bl	8001418 <HAL_FDCAN_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a96:	f000 f923 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000aca:	f000 fef9 	bl	80018c0 <HAL_FDCAN_ConfigGlobalFilter>
  FDCAN_REJECT_REMOTE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000ace:	491b      	ldr	r1, [pc, #108]	; (8000b3c <MX_FDCAN1_Init+0x160>)
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000ad2:	f000 fe7f 	bl	80017d4 <HAL_FDCAN_ConfigFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_FDCAN1_Init+0x104>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 8000adc:	f000 f900 	bl	8000ce0 <Error_Handler>
  }
  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000ae0:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000ae2:	f000 ff1a 	bl	800191a <HAL_FDCAN_Start>
  }
  /* Start Error */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_FDCAN1_Init+0x158>)
 8000aec:	f001 f90a 	bl	8001d04 <HAL_FDCAN_ActivateNotification>
  }
  /* Notification Error */
	  /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000af2:	f240 1211 	movw	r2, #273	; 0x111
 8000af6:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b06:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000b0a:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b18:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b20:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_FDCAN1_Init+0x164>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	24000098 	.word	0x24000098
 8000b38:	4000a000 	.word	0x4000a000
 8000b3c:	240001c8 	.word	0x240001c8
 8000b40:	240001e8 	.word	0x240001e8

08000b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART3_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f004 f8ab 	bl	8004ce8 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f8a2 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000ba0:	f005 f8de 	bl	8005d60 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f899 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f005 f913 	bl	8005ddc <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f890 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bc2:	f005 f894 	bl	8005cee <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f888 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000138 	.word	0x24000138
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a36      	ldr	r2, [pc, #216]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0xf8>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_GPIO_Init+0xfc>)
 8000c90:	f001 fc66 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_GPIO_Init+0x100>)
 8000caa:	f001 faa9 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cae:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0xfc>)
 8000cc8:	f001 fa9a 	bl	8002200 <HAL_GPIO_Init>

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020400 	.word	0x58020400
 8000cdc:	58020800 	.word	0x58020800

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cf4:	1d39      	adds	r1, r7, #4
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <__io_putchar+0x20>)
 8000cfe:	f004 f843 	bl	8004d88 <HAL_UART_Transmit>
  return ch;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000138 	.word	0x24000138

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_MspInit+0x30>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d1c:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x30>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	58024400 	.word	0x58024400

08000d44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0b8      	sub	sp, #224	; 0xe0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	22bc      	movs	r2, #188	; 0xbc
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 f8fd 	bl	8005f64 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <HAL_FDCAN_MspInit+0xc0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d142      	bne.n	8000dfa <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fc47 	bl	8003618 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d90:	f7ff ffa6 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000d96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000da6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_FDCAN_MspInit+0xc4>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000de8:	2309      	movs	r3, #9
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_FDCAN_MspInit+0xc8>)
 8000df6:	f001 fa03 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	37e0      	adds	r7, #224	; 0xe0
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	4000a000 	.word	0x4000a000
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0b8      	sub	sp, #224	; 0xe0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22bc      	movs	r2, #188	; 0xbc
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 f897 	bl	8005f64 <memset>
  if(huart->Instance==USART3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <HAL_UART_MspInit+0xc0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d142      	bne.n	8000ec6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fbe2 	bl	8003618 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5a:	f7ff ff41 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000ec2:	f001 f99d 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	37e0      	adds	r7, #224	; 0xe0
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58020c00 	.word	0x58020c00

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f942 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e00a      	b.n	8000f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f42:	f3af 8000 	nop.w
 8000f46:	4601      	mov	r1, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf0      	blt.n	8000f42 <_read+0x12>
	}

return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e009      	b.n	8000f90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff feb1 	bl	8000cec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf1      	blt.n	8000f7c <_write+0x12>
	}
	return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_close>:

int _close(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fca:	605a      	str	r2, [r3, #4]
	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_isatty>:

int _isatty(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f004 ff5a 	bl	8005ef4 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24080000 	.word	0x24080000
 800106c:	00000400 	.word	0x00000400
 8001070:	2400023c 	.word	0x2400023c
 8001074:	24000258 	.word	0x24000258

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff fb02 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f004 ff2b 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fb81 	bl	80007b0 <main>
  bx  lr
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80010bc:	080070a8 	.word	0x080070a8
  ldr r2, =_sbss
 80010c0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80010c4:	24000254 	.word	0x24000254

080010c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC3_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f96e 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010d8:	f002 f8c8 	bl	800326c <HAL_RCC_GetSysClockFreq>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <HAL_Init+0x6c>)
 80010ea:	5ccb      	ldrb	r3, [r1, r3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_Init+0x68>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_Init+0x6c>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_Init+0x70>)
 800110e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_Init+0x74>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f814 	bl	8001144 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e002      	b.n	800112c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fdf3 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58024400 	.word	0x58024400
 8001138:	08006fb8 	.word	0x08006fb8
 800113c:	24000004 	.word	0x24000004
 8001140:	24000000 	.word	0x24000000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_InitTick+0x60>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e021      	b.n	800119c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_InitTick+0x64>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_InitTick+0x60>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f945 	bl	80013fe <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f91d 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_InitTick+0x68>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24000014 	.word	0x24000014
 80011a8:	24000000 	.word	0x24000000
 80011ac:	24000010 	.word	0x24000010

080011b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_IncTick+0x24>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	24000014 	.word	0x24000014
 80011d4:	24000240 	.word	0x24000240

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_GetTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	24000240 	.word	0x24000240

080011f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ffee 	bl	80011d8 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d005      	beq.n	8001216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_Delay+0x44>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001216:	bf00      	nop
 8001218:	f7ff ffde 	bl	80011d8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d8f7      	bhi.n	8001218 <HAL_Delay+0x28>
  {
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000014 	.word	0x24000014

08001238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetREVID+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1b      	lsrs	r3, r3, #16
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	5c001000 	.word	0x5c001000

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff47 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb2 	bl	8001370 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b098      	sub	sp, #96	; 0x60
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001420:	4a84      	ldr	r2, [pc, #528]	; (8001634 <HAL_FDCAN_Init+0x21c>)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4611      	mov	r1, r2
 8001428:	224c      	movs	r2, #76	; 0x4c
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fd8c 	bl	8005f48 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c6      	b.n	80017c8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <HAL_FDCAN_Init+0x220>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d106      	bne.n	8001452 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800144c:	461a      	mov	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fc6c 	bl	8000d44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0210 	bic.w	r2, r2, #16
 800147a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147c:	f7ff feac 	bl	80011d8 <HAL_GetTick>
 8001480:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001482:	e014      	b.n	80014ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001484:	f7ff fea8 	bl	80011d8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d90d      	bls.n	80014ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e18c      	b.n	80017c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d0e3      	beq.n	8001484 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014cc:	f7ff fe84 	bl	80011d8 <HAL_GetTick>
 80014d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014d2:	e014      	b.n	80014fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014d4:	f7ff fe80 	bl	80011d8 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d90d      	bls.n	80014fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e164      	b.n	80017c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0e3      	beq.n	80014d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699a      	ldr	r2, [r3, #24]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0202 	orr.w	r2, r2, #2
 800151a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7c1b      	ldrb	r3, [r3, #16]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001532:	619a      	str	r2, [r3, #24]
 8001534:	e007      	b.n	8001546 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001544:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7c5b      	ldrb	r3, [r3, #17]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	e007      	b.n	8001570 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800156e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c9b      	ldrb	r3, [r3, #18]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	e007      	b.n	800159a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001598:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0210 	bic.w	r2, r2, #16
 80015ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0204 	orr.w	r2, r2, #4
 80015e6:	619a      	str	r2, [r3, #24]
 80015e8:	e030      	b.n	800164c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d02c      	beq.n	800164c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d020      	beq.n	800163c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0210 	orr.w	r2, r2, #16
 8001618:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d114      	bne.n	800164c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0220 	orr.w	r2, r2, #32
 8001630:	619a      	str	r2, [r3, #24]
 8001632:	e00b      	b.n	800164c <HAL_FDCAN_Init+0x234>
 8001634:	08006f6c 	.word	0x08006f6c
 8001638:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	3b01      	subs	r3, #1
 8001652:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	3b01      	subs	r3, #1
 800165a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800165c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001664:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	3b01      	subs	r3, #1
 800166e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001674:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001676:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001680:	d115      	bne.n	80016ae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	3b01      	subs	r3, #1
 800168e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001690:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	3b01      	subs	r3, #1
 8001698:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800169a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016ac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d4:	4413      	add	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d011      	beq.n	80016fe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80016e2:	f023 0107 	bic.w	r1, r3, #7
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	3360      	adds	r3, #96	; 0x60
 80016ee:	443b      	add	r3, r7
 80016f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d011      	beq.n	800172a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800170e:	f023 0107 	bic.w	r1, r3, #7
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	443b      	add	r3, r7
 800171c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800173a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	3360      	adds	r3, #96	; 0x60
 8001746:	443b      	add	r3, r7
 8001748:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800174c:	011a      	lsls	r2, r3, #4
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175c:	2b00      	cmp	r3, #0
 800175e:	d012      	beq.n	8001786 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001768:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3360      	adds	r3, #96	; 0x60
 8001774:	443b      	add	r3, r7
 8001776:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800177a:	021a      	lsls	r2, r3, #8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_FDCAN_Init+0x3b8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d107      	bne.n	80017a0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f022 0203 	bic.w	r2, r2, #3
 800179e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fb1d 	bl	8001df8 <FDCAN_CalcultateRamBlockAddresses>
 80017be:	4603      	mov	r3, r0
 80017c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80017c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3760      	adds	r7, #96	; 0x60
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	4000a000 	.word	0x4000a000

080017d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017e4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d002      	beq.n	80017f2 <HAL_FDCAN_ConfigFilter+0x1e>
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d157      	bne.n	80018a2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d12b      	bne.n	8001852 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	d10d      	bne.n	800181e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800180e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001814:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001816:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e00e      	b.n	800183c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800182a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001832:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e025      	b.n	800189e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	075a      	lsls	r2, r3, #29
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b07      	cmp	r3, #7
 8001866:	d103      	bne.n	8001870 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	e006      	b.n	800187e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	079a      	lsls	r2, r3, #30
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3304      	adds	r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e008      	b.n	80018b4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d110      	bne.n	80018fc <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80018e2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80018f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e008      	b.n	800190e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001902:	f043 0204 	orr.w	r2, r3, #4
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d111      	bne.n	8001952 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e008      	b.n	8001964 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001958:	f043 0204 	orr.w	r2, r3, #4
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d141      	bne.n	8001a0c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001990:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800199e:	f043 0220 	orr.w	r2, r3, #32
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e026      	b.n	8001a1e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fb8c 	bl	8002104 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	409a      	lsls	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e008      	b.n	8001a1e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a12:	f043 0208 	orr.w	r2, r3, #8
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a40:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a42:	7efb      	ldrb	r3, [r7, #27]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f040 814b 	bne.w	8001ce0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d14d      	bne.n	8001aec <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e13e      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e12c      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aa0:	0e1b      	lsrs	r3, r3, #24
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ab2:	0fdb      	lsrs	r3, r3, #31
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001abc:	d101      	bne.n	8001ac2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	69f9      	ldr	r1, [r7, #28]
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e069      	b.n	8001bc0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b41      	cmp	r3, #65	; 0x41
 8001af0:	d14d      	bne.n	8001b8e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ed      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0db      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b42:	0e1b      	lsrs	r3, r3, #24
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10b      	bne.n	8001b64 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b54:	0fdb      	lsrs	r3, r3, #31
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5e:	d101      	bne.n	8001b64 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	69f9      	ldr	r1, [r7, #28]
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e018      	b.n	8001bc0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d309      	bcc.n	8001bac <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b9e:	f043 0220 	orr.w	r2, r3, #32
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0a2      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c9b      	lsrs	r3, r3, #18
 8001bda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e005      	b.n	8001bf0 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e1b      	lsrs	r3, r3, #24
 8001c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0fda      	lsrs	r2, r3, #31
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3304      	adds	r3, #4
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
 8001c62:	e00a      	b.n	8001c7a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	441a      	add	r2, r3
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	440b      	add	r3, r1
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	3301      	adds	r3, #1
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d3eb      	bcc.n	8001c64 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d105      	bne.n	8001c9e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001c9c:	e01e      	b.n	8001cdc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b41      	cmp	r3, #65	; 0x41
 8001ca2:	d105      	bne.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001cae:	e015      	b.n	8001cdc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b1f      	cmp	r3, #31
 8001cb4:	d808      	bhi.n	8001cc8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001cc6:	e009      	b.n	8001cdc <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e008      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ce6:	f043 0208 	orr.w	r2, r3, #8
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	372c      	adds	r7, #44	; 0x2c
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	08006fc8 	.word	0x08006fc8

08001d04 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d16:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d002      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0x20>
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d155      	bne.n	8001dd0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d42:	e014      	b.n	8001d6e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d108      	bne.n	8001d66 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0202 	orr.w	r2, r2, #2
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d64:	e003      	b.n	8001d6e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_FDCAN_ActivateNotification+0xec>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6553      	str	r3, [r2, #84]	; 0x54
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0f9b      	lsrs	r3, r3, #30
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e008      	b.n	8001de2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	3fcfffff 	.word	0x3fcfffff
 8001df4:	4000a800 	.word	0x4000a800

08001df8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e0e:	4ba7      	ldr	r3, [pc, #668]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	0091      	lsls	r1, r2, #2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e28:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	4413      	add	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e4e:	4b97      	ldr	r3, [pc, #604]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	0091      	lsls	r1, r2, #2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e68:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	041a      	lsls	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001e90:	4b86      	ldr	r3, [pc, #536]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	0091      	lsls	r1, r2, #2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001eaa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ed8:	4b74      	ldr	r3, [pc, #464]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	0091      	lsls	r1, r2, #2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ef2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f20:	4b62      	ldr	r3, [pc, #392]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	0091      	lsls	r1, r2, #2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	0091      	lsls	r1, r2, #2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f66:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	041a      	lsls	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	4413      	add	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	0091      	lsls	r1, r2, #2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fa8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fc4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	061a      	lsls	r2, r3, #24
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	441a      	add	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	441a      	add	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d915      	bls.n	80020d4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80020a8:	e006      	b.n	80020b8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80020aa:	bf00      	nop
 80020ac:	ffff0003 	.word	0xffff0003
 80020b0:	10002b00 	.word	0x10002b00
 80020b4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020be:	f043 0220 	orr.w	r2, r3, #32
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e010      	b.n	80020f6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e005      	b.n	80020e8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3f3      	bcc.n	80020dc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002122:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800212a:	4313      	orrs	r3, r2
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e00a      	b.n	8002146 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002138:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800213e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002144:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002150:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002156:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800215c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3304      	adds	r3, #4
 8002186:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3304      	adds	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e020      	b.n	80021dc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3303      	adds	r3, #3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3302      	adds	r3, #2
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	440b      	add	r3, r1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	440b      	add	r3, r1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80021c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	440a      	add	r2, r1
 80021c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80021ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	3304      	adds	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <FDCAN_CopyMessageToRAM+0xf8>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	461a      	mov	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d3d5      	bcc.n	800219a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	08006fc8 	.word	0x08006fc8

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800220e:	4b89      	ldr	r3, [pc, #548]	; (8002434 <HAL_GPIO_Init+0x234>)
 8002210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002212:	e194      	b.n	800253e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8186 	beq.w	8002538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d005      	beq.n	8002244 <HAL_GPIO_Init+0x44>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d130      	bne.n	80022a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227a:	2201      	movs	r2, #1
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0201 	and.w	r2, r3, #1
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d017      	beq.n	80022e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d123      	bne.n	8002336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0203 	and.w	r2, r3, #3
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80e0 	beq.w	8002538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x238>)
 800237a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800237e:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x238>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_GPIO_Init+0x238>)
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_GPIO_Init+0x23c>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <HAL_GPIO_Init+0x240>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d052      	beq.n	8002468 <HAL_GPIO_Init+0x268>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x244>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_GPIO_Init+0x248>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02b      	beq.n	800242a <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_GPIO_Init+0x24c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_GPIO_Init+0x250>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_GPIO_Init+0x254>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_GPIO_Init+0x258>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_GPIO_Init+0x25c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_GPIO_Init+0x260>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_GPIO_Init+0x264>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x20e>
 800240a:	2309      	movs	r3, #9
 800240c:	e02d      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800240e:	230a      	movs	r3, #10
 8002410:	e02b      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002412:	2308      	movs	r3, #8
 8002414:	e029      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002416:	2307      	movs	r3, #7
 8002418:	e027      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800241a:	2306      	movs	r3, #6
 800241c:	e025      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800241e:	2305      	movs	r3, #5
 8002420:	e023      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002422:	2304      	movs	r3, #4
 8002424:	e021      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002426:	2303      	movs	r3, #3
 8002428:	e01f      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800242a:	2302      	movs	r3, #2
 800242c:	e01d      	b.n	800246a <HAL_GPIO_Init+0x26a>
 800242e:	2301      	movs	r3, #1
 8002430:	e01b      	b.n	800246a <HAL_GPIO_Init+0x26a>
 8002432:	bf00      	nop
 8002434:	58000080 	.word	0x58000080
 8002438:	58024400 	.word	0x58024400
 800243c:	58000400 	.word	0x58000400
 8002440:	58020000 	.word	0x58020000
 8002444:	58020400 	.word	0x58020400
 8002448:	58020800 	.word	0x58020800
 800244c:	58020c00 	.word	0x58020c00
 8002450:	58021000 	.word	0x58021000
 8002454:	58021400 	.word	0x58021400
 8002458:	58021800 	.word	0x58021800
 800245c:	58021c00 	.word	0x58021c00
 8002460:	58022000 	.word	0x58022000
 8002464:	58022400 	.word	0x58022400
 8002468:	2300      	movs	r3, #0
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f002 0203 	and.w	r2, r2, #3
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	4093      	lsls	r3, r2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247a:	4938      	ldr	r1, [pc, #224]	; (800255c <HAL_GPIO_Init+0x35c>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f ae63 	bne.w	8002214 <HAL_GPIO_Init+0x14>
  }
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	58000400 	.word	0x58000400

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800259c:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_HSEM_FastTake+0x2c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3320      	adds	r3, #32
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_HSEM_FastTake+0x30>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	58026400 	.word	0x58026400
 80025c4:	80000300 	.word	0x80000300

080025c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025d2:	4906      	ldr	r1, [pc, #24]	; (80025ec <HAL_HSEM_Release+0x24>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	58026400 	.word	0x58026400

080025f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	2b06      	cmp	r3, #6
 8002602:	d00a      	beq.n	800261a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e040      	b.n	8002698 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e03e      	b.n	8002698 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800262a:	f7fe fdd5 	bl	80011d8 <HAL_GetTick>
 800262e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002630:	e009      	b.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002632:	f7fe fdd1 	bl	80011d8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002640:	d901      	bls.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e028      	b.n	8002698 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002652:	d1ee      	bne.n	8002632 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b1e      	cmp	r3, #30
 8002658:	d008      	beq.n	800266c <HAL_PWREx_ConfigSupply+0x7c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b2e      	cmp	r3, #46	; 0x2e
 800265e:	d005      	beq.n	800266c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b1d      	cmp	r3, #29
 8002664:	d002      	beq.n	800266c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b2d      	cmp	r3, #45	; 0x2d
 800266a:	d114      	bne.n	8002696 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800266c:	f7fe fdb4 	bl	80011d8 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002672:	e009      	b.n	8002688 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002674:	f7fe fdb0 	bl	80011d8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002682:	d901      	bls.n	8002688 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e007      	b.n	8002698 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d1ee      	bne.n	8002674 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	58024800 	.word	0x58024800

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f000 bc1d 	b.w	8002ef2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8087 	beq.w	80027d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	4b99      	ldr	r3, [pc, #612]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d0:	4b96      	ldr	r3, [pc, #600]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d007      	beq.n	80026ec <HAL_RCC_OscConfig+0x48>
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b18      	cmp	r3, #24
 80026e0:	d110      	bne.n	8002704 <HAL_RCC_OscConfig+0x60>
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d06c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x12e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d168      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e3f6      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x78>
 800270e:	4b87      	ldr	r3, [pc, #540]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a86      	ldr	r2, [pc, #536]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e02e      	b.n	800277a <HAL_RCC_OscConfig+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x9a>
 8002724:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b7e      	ldr	r3, [pc, #504]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7d      	ldr	r2, [pc, #500]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e01d      	b.n	800277a <HAL_RCC_OscConfig+0xd6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0xbe>
 8002748:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a74      	ldr	r2, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0xd6>
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d013      	beq.n	80027aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fd29 	bl	80011d8 <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278a:	f7fe fd25 	bl	80011d8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e3aa      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0xe6>
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe fd15 	bl	80011d8 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b2:	f7fe fd11 	bl	80011d8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e396      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x10e>
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80cb 	beq.w	8002978 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b52      	ldr	r3, [pc, #328]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_RCC_OscConfig+0x164>
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	2b18      	cmp	r3, #24
 80027fc:	d156      	bne.n	80028ac <HAL_RCC_OscConfig+0x208>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d151      	bne.n	80028ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002808:	4b48      	ldr	r3, [pc, #288]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x17c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e368      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002820:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0219 	bic.w	r2, r3, #25
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	493f      	ldr	r1, [pc, #252]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002832:	f7fe fcd1 	bl	80011d8 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fccd 	bl	80011d8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e352      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284c:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	f7fe fcee 	bl	8001238 <HAL_GetREVID>
 800285c:	4603      	mov	r3, r0
 800285e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002862:	4293      	cmp	r3, r2
 8002864:	d817      	bhi.n	8002896 <HAL_RCC_OscConfig+0x1f2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x1dc>
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287e:	e07b      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	4927      	ldr	r1, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	e070      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4921      	ldr	r1, [pc, #132]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028aa:	e065      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d048      	beq.n	8002946 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 0219 	bic.w	r2, r3, #25
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	491a      	ldr	r1, [pc, #104]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fc87 	bl	80011d8 <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fc83 	bl	80011d8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e308      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_RCC_OscConfig+0x288>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	f7fe fca4 	bl	8001238 <HAL_GetREVID>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d81a      	bhi.n	8002930 <HAL_RCC_OscConfig+0x28c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x270>
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_OscConfig+0x288>)
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	6053      	str	r3, [r2, #4]
 8002912:	e031      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	031b      	lsls	r3, r3, #12
 8002922:	4902      	ldr	r1, [pc, #8]	; (800292c <HAL_RCC_OscConfig+0x288>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	e026      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
 8002930:	4b9a      	ldr	r3, [pc, #616]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	4997      	ldr	r1, [pc, #604]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e018      	b.n	8002978 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b95      	ldr	r3, [pc, #596]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a94      	ldr	r2, [pc, #592]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fc41 	bl	80011d8 <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe fc3d 	bl	80011d8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e2c2      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800296c:	4b8b      	ldr	r3, [pc, #556]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a9 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800298e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002990:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d007      	beq.n	80029ac <HAL_RCC_OscConfig+0x308>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d13a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x374>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d135      	bne.n	8002a18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ac:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x320>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e296      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c4:	f7fe fc38 	bl	8001238 <HAL_GetREVID>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d817      	bhi.n	8002a02 <HAL_RCC_OscConfig+0x35e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x348>
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029e2:	4a6e      	ldr	r2, [pc, #440]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ea:	e075      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ec:	4b6b      	ldr	r3, [pc, #428]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	069b      	lsls	r3, r3, #26
 80029fa:	4968      	ldr	r1, [pc, #416]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a00:	e06a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a02:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	4962      	ldr	r1, [pc, #392]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a16:	e05f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d042      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fbd4 	bl	80011d8 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a34:	f7fe fbd0 	bl	80011d8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e255      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a46:	4b55      	ldr	r3, [pc, #340]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a52:	f7fe fbf1 	bl	8001238 <HAL_GetREVID>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d817      	bhi.n	8002a90 <HAL_RCC_OscConfig+0x3ec>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d108      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3d6>
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a76:	6053      	str	r3, [r2, #4]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
 8002a7a:	4b48      	ldr	r3, [pc, #288]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	069b      	lsls	r3, r3, #26
 8002a88:	4944      	ldr	r1, [pc, #272]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e023      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
 8002a90:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	493f      	ldr	r1, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e018      	b.n	8002ad8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fb91 	bl	80011d8 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aba:	f7fe fb8d 	bl	80011d8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e212      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d036      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fb6e 	bl	80011d8 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fb6a 	bl	80011d8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1ef      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x45c>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fb54 	bl	80011d8 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fb50 	bl	80011d8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1d5      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d039      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb31 	bl	80011d8 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b7a:	f7fe fb2d 	bl	80011d8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1b2      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
 8002b98:	e01b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x52e>
 8002b9a:	bf00      	nop
 8002b9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ba0:	4b9b      	ldr	r3, [pc, #620]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a9a      	ldr	r2, [pc, #616]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bac:	f7fe fb14 	bl	80011d8 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bb4:	f7fe fb10 	bl	80011d8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e195      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc6:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8081 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a8b      	ldr	r2, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bec:	f7fe faf4 	bl	80011d8 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe faf0 	bl	80011d8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e175      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c06:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x770>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x584>
 8002c1a:	4b7d      	ldr	r3, [pc, #500]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a7c      	ldr	r2, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	e02d      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5a6>
 8002c30:	4b77      	ldr	r3, [pc, #476]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a76      	ldr	r2, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	4b74      	ldr	r3, [pc, #464]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a73      	ldr	r2, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c8>
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a6b      	ldr	r2, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x5e0>
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe faa4 	bl	80011d8 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe faa0 	bl	80011d8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e123      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5f0>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fa8e 	bl	80011d8 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fa8a 	bl	80011d8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e10d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8102 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cec:	4b48      	ldr	r3, [pc, #288]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf4:	2b18      	cmp	r3, #24
 8002cf6:	f000 80bd 	beq.w	8002e74 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f040 809e 	bne.w	8002e40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a41      	ldr	r2, [pc, #260]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fa62 	bl	80011d8 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fa5e 	bl	80011d8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0e3      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x774>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4931      	ldr	r1, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	3b01      	subs	r3, #1
 8002d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d80:	4923      	ldr	r1, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	4a21      	ldr	r2, [pc, #132]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_RCC_OscConfig+0x778>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	491b      	ldr	r1, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4917      	ldr	r1, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f023 0202 	bic.w	r2, r3, #2
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	4912      	ldr	r1, [pc, #72]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe f9e7 	bl	80011d8 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0c:	e011      	b.n	8002e32 <HAL_RCC_OscConfig+0x78e>
 8002e0e:	bf00      	nop
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58024800 	.word	0x58024800
 8002e18:	fffffc0c 	.word	0xfffffc0c
 8002e1c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe f9da 	bl	80011d8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e05f      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x77c>
 8002e3e:	e057      	b.n	8002ef0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9c4 	bl	80011d8 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f9c0 	bl	80011d8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e045      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x7b0>
 8002e72:	e03d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_OscConfig+0x858>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d031      	beq.n	8002eec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d12a      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d122      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11a      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0a5b      	lsrs	r3, r3, #9
 8002eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d111      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d108      	bne.n	8002eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0e1b      	lsrs	r3, r3, #24
 8002ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	; 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	58024400 	.word	0x58024400

08002f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e19c      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b8a      	ldr	r3, [pc, #552]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d910      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b87      	ldr	r3, [pc, #540]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 020f 	bic.w	r2, r3, #15
 8002f2a:	4985      	ldr	r1, [pc, #532]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b83      	ldr	r3, [pc, #524]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e184      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d908      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f60:	4b78      	ldr	r3, [pc, #480]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4975      	ldr	r1, [pc, #468]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b70      	ldr	r3, [pc, #448]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d908      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	496a      	ldr	r1, [pc, #424]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	4b64      	ldr	r3, [pc, #400]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	495e      	ldr	r1, [pc, #376]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d908      	bls.n	8002ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fea:	4b56      	ldr	r3, [pc, #344]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4953      	ldr	r1, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	429a      	cmp	r2, r3
 8003016:	d908      	bls.n	800302a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f023 020f 	bic.w	r2, r3, #15
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4947      	ldr	r1, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003026:	4313      	orrs	r3, r2
 8003028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d055      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4940      	ldr	r1, [pc, #256]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003044:	4313      	orrs	r3, r2
 8003046:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003050:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0f6      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0ea      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0de      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d6      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f023 0207 	bic.w	r2, r3, #7
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4925      	ldr	r1, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe f891 	bl	80011d8 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fe f88d 	bl	80011d8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0be      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1eb      	bne.n	80030ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d208      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x244>)
 800310c:	4313      	orrs	r3, r2
 800310e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d214      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4906      	ldr	r1, [pc, #24]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e086      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
 8003140:	52002000 	.word	0x52002000
 8003144:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003160:	429a      	cmp	r2, r3
 8003162:	d208      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003164:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	4939      	ldr	r1, [pc, #228]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003172:	4313      	orrs	r3, r2
 8003174:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d010      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	4b34      	ldr	r3, [pc, #208]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800318e:	429a      	cmp	r2, r3
 8003190:	d208      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	492e      	ldr	r1, [pc, #184]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031bc:	429a      	cmp	r2, r3
 80031be:	d208      	bcs.n	80031d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d208      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4917      	ldr	r1, [pc, #92]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003200:	f000 f834 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	4912      	ldr	r1, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x35c>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_RCC_ClockConfig+0x35c>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x360>)
 8003236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x364>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x368>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd ff7e 	bl	8001144 <HAL_InitTick>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400
 800325c:	08006fb8 	.word	0x08006fb8
 8003260:	24000004 	.word	0x24000004
 8003264:	24000000 	.word	0x24000000
 8003268:	24000010 	.word	0x24000010

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003272:	4bb3      	ldr	r3, [pc, #716]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327a:	2b18      	cmp	r3, #24
 800327c:	f200 8155 	bhi.w	800352a <HAL_RCC_GetSysClockFreq+0x2be>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ed 	.word	0x080032ed
 800328c:	0800352b 	.word	0x0800352b
 8003290:	0800352b 	.word	0x0800352b
 8003294:	0800352b 	.word	0x0800352b
 8003298:	0800352b 	.word	0x0800352b
 800329c:	0800352b 	.word	0x0800352b
 80032a0:	0800352b 	.word	0x0800352b
 80032a4:	0800352b 	.word	0x0800352b
 80032a8:	08003313 	.word	0x08003313
 80032ac:	0800352b 	.word	0x0800352b
 80032b0:	0800352b 	.word	0x0800352b
 80032b4:	0800352b 	.word	0x0800352b
 80032b8:	0800352b 	.word	0x0800352b
 80032bc:	0800352b 	.word	0x0800352b
 80032c0:	0800352b 	.word	0x0800352b
 80032c4:	0800352b 	.word	0x0800352b
 80032c8:	08003319 	.word	0x08003319
 80032cc:	0800352b 	.word	0x0800352b
 80032d0:	0800352b 	.word	0x0800352b
 80032d4:	0800352b 	.word	0x0800352b
 80032d8:	0800352b 	.word	0x0800352b
 80032dc:	0800352b 	.word	0x0800352b
 80032e0:	0800352b 	.word	0x0800352b
 80032e4:	0800352b 	.word	0x0800352b
 80032e8:	0800331f 	.word	0x0800331f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ec:	4b94      	ldr	r3, [pc, #592]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032f8:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	4a90      	ldr	r2, [pc, #576]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800330a:	e111      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800330c:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800330e:	61bb      	str	r3, [r7, #24]
    break;
 8003310:	e10e      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003314:	61bb      	str	r3, [r7, #24]
    break;
 8003316:	e10b      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003318:	4b8c      	ldr	r3, [pc, #560]	; (800354c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800331a:	61bb      	str	r3, [r7, #24]
    break;
 800331c:	e108      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003328:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003334:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800333e:	4b80      	ldr	r3, [pc, #512]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80e1 	beq.w	8003524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	f000 8083 	beq.w	8003470 <HAL_RCC_GetSysClockFreq+0x204>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	f200 80a1 	bhi.w	80034b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x114>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d056      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x1c0>
 800337e:	e099      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800338c:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033e6:	e087      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e065      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346e:	e043      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800355c <HAL_RCC_GetSysClockFreq+0x2f0>
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003492:	ed97 6a02 	vldr	s12, [r7, #8]
 8003496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800349a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034b2:	e021      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003502:	3301      	adds	r3, #1
 8003504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003510:	edd7 6a07 	vldr	s13, [r7, #28]
 8003514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	ee17 3a90 	vmov	r3, s15
 8003520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003522:	e005      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    break;
 8003528:	e002      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800352c:	61bb      	str	r3, [r7, #24]
    break;
 800352e:	bf00      	nop
  }

  return sysclockfreq;
 8003530:	69bb      	ldr	r3, [r7, #24]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
 8003544:	03d09000 	.word	0x03d09000
 8003548:	003d0900 	.word	0x003d0900
 800354c:	007a1200 	.word	0x007a1200
 8003550:	46000000 	.word	0x46000000
 8003554:	4c742400 	.word	0x4c742400
 8003558:	4a742400 	.word	0x4a742400
 800355c:	4af42400 	.word	0x4af42400

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003566:	f7ff fe81 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490f      	ldr	r1, [pc, #60]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800359c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	58024400 	.word	0x58024400
 80035b4:	08006fb8 	.word	0x08006fb8
 80035b8:	24000004 	.word	0x24000004
 80035bc:	24000000 	.word	0x24000000

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035c4:	f7ff ffcc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4904      	ldr	r1, [pc, #16]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	58024400 	.word	0x58024400
 80035e8:	08006fb8 	.word	0x08006fb8

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035f0:	f7ff ffb6 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4904      	ldr	r1, [pc, #16]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024400 	.word	0x58024400
 8003614:	08006fb8 	.word	0x08006fb8

08003618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003620:	2300      	movs	r3, #0
 8003622:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003624:	2300      	movs	r3, #0
 8003626:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03f      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363c:	d02a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003642:	d824      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003648:	d018      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364e:	d81e      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003658:	d007      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800365a:	e018      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4ba3      	ldr	r3, [pc, #652]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4aa2      	ldr	r2, [pc, #648]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003668:	e015      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f001 f9d5 	bl	8004a20 <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800367a:	e00c      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fa7e 	bl	8004b84 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800369c:	4b93      	ldr	r3, [pc, #588]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	4990      	ldr	r1, [pc, #576]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	650b      	str	r3, [r1, #80]	; 0x50
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03d      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d826      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e5 	.word	0x080036e5
 80036d4:	080036f3 	.word	0x080036f3
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371d 	.word	0x0800371d
 80036e0:	0800371d 	.word	0x0800371d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4a80      	ldr	r2, [pc, #512]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f0:	e015      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f991 	bl	8004a20 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003702:	e00c      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fa3a 	bl	8004b84 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800371c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003724:	4b71      	ldr	r3, [pc, #452]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	f023 0207 	bic.w	r2, r3, #7
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	496e      	ldr	r1, [pc, #440]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	650b      	str	r3, [r1, #80]	; 0x50
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003744:	2b00      	cmp	r3, #0
 8003746:	d042      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003750:	d02b      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003756:	d825      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003758:	2bc0      	cmp	r3, #192	; 0xc0
 800375a:	d028      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800375c:	2bc0      	cmp	r3, #192	; 0xc0
 800375e:	d821      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d016      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d81d      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d007      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003770:	e018      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003772:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	4a5d      	ldr	r2, [pc, #372]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800377e:	e017      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 f94a 	bl	8004a20 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003790:	e00e      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f9f3 	bl	8004b84 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
      break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037b6:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	494a      	ldr	r1, [pc, #296]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	650b      	str	r3, [r1, #80]	; 0x50
 80037c8:	e001      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d049      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e4:	d030      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ea:	d82a      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037f0:	d02c      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037f6:	d824      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fc:	d018      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d81e      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800380c:	d007      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800380e:	e018      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a35      	ldr	r2, [pc, #212]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800381c:	e017      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f8fb 	bl	8004a20 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800382e:	e00e      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f9a4 	bl	8004b84 <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003840:	e005      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
      break;
 8003846:	e002      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800384c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003862:	4922      	ldr	r1, [pc, #136]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	658b      	str	r3, [r1, #88]	; 0x58
 8003868:	e001      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04b      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003884:	d030      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388a:	d82a      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800388c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003890:	d02e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003896:	d824      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800389c:	d018      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800389e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a2:	d81e      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ac:	d007      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038ae:	e018      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038bc:	e019      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f8ab 	bl	8004a20 <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038ce:	e010      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 f954 	bl	8004b84 <RCCEx_PLL3_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e0:	e007      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038ec:	58024400 	.word	0x58024400
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038f8:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003906:	4996      	ldr	r1, [pc, #600]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003908:	4313      	orrs	r3, r2
 800390a:	658b      	str	r3, [r1, #88]	; 0x58
 800390c:	e001      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	2b30      	cmp	r3, #48	; 0x30
 8003924:	d01c      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003926:	2b30      	cmp	r3, #48	; 0x30
 8003928:	d817      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800392a:	2b20      	cmp	r3, #32
 800392c:	d00c      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800392e:	2b20      	cmp	r3, #32
 8003930:	d813      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003936:	2b10      	cmp	r3, #16
 8003938:	d10f      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393a:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	4a88      	ldr	r2, [pc, #544]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003946:	e00e      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f866 	bl	8004a20 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003958:	e005      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800396c:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	4979      	ldr	r1, [pc, #484]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397a:	4313      	orrs	r3, r2
 800397c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d047      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003998:	d030      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d82a      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80039a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039a4:	d02c      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80039a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039aa:	d824      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b0:	d018      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d81e      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	d007      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80039c2:	e018      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039d0:	e017      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f821 	bl	8004a20 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039e2:	e00e      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f8ca 	bl	8004b84 <RCCEx_PLL3_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a08:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	4952      	ldr	r1, [pc, #328]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	650b      	str	r3, [r1, #80]	; 0x50
 8003a1a:	e001      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d049      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d02e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3a:	d828      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a40:	d02a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a46:	d822      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a4c:	d026      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a52:	d81c      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a58:	d010      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5e:	d816      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01d      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d111      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ffd5 	bl	8004a20 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e012      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 f87e 	bl	8004b84 <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	e006      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a94:	bf00      	nop
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a98:	bf00      	nop
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	492a      	ldr	r1, [pc, #168]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d04d      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad6:	d02e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d828      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d02a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d822      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003aea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aee:	d026      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af4:	d81c      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afa:	d010      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b00:	d816      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01d      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff84 	bl	8004a20 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b1c:	e012      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3324      	adds	r3, #36	; 0x24
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f82d 	bl	8004b84 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b36:	bf00      	nop
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b58:	4901      	ldr	r1, [pc, #4]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b5e:	e003      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d02f      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d00e      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b82:	d814      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8c:	d10f      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8e:	4baf      	ldr	r3, [pc, #700]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	4aae      	ldr	r2, [pc, #696]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b9a:	e00c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ff3c 	bl	8004a20 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bbc:	4ba3      	ldr	r3, [pc, #652]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	49a0      	ldr	r1, [pc, #640]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	650b      	str	r3, [r1, #80]	; 0x50
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d032      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d81b      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c01 	.word	0x08003c01
 8003bf8:	08003c0f 	.word	0x08003c0f
 8003bfc:	08003c27 	.word	0x08003c27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b92      	ldr	r3, [pc, #584]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a91      	ldr	r2, [pc, #580]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ff03 	bl	8004a20 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c2e:	4b87      	ldr	r3, [pc, #540]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	4984      	ldr	r1, [pc, #528]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c40:	e001      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8086 	beq.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c54:	4b7e      	ldr	r3, [pc, #504]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a7d      	ldr	r2, [pc, #500]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c60:	f7fd faba 	bl	80011d8 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c66:	e009      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fd fab6 	bl	80011d8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d902      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	75fb      	strb	r3, [r7, #23]
        break;
 8003c7a:	e005      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c7c:	4b74      	ldr	r3, [pc, #464]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ef      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d166      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c8e:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c98:	4053      	eors	r3, r2
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d013      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca2:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003caa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cac:	4b67      	ldr	r3, [pc, #412]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a66      	ldr	r2, [pc, #408]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb8:	4b64      	ldr	r3, [pc, #400]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a63      	ldr	r2, [pc, #396]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cc4:	4a61      	ldr	r2, [pc, #388]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd4:	d115      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fa7f 	bl	80011d8 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cdc:	e00b      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fd fa7b 	bl	80011d8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d902      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	75fb      	strb	r3, [r7, #23]
            break;
 8003cf4:	e005      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf6:	4b55      	ldr	r3, [pc, #340]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ed      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d126      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d26:	0919      	lsrs	r1, r3, #4
 8003d28:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	4947      	ldr	r1, [pc, #284]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	610b      	str	r3, [r1, #16]
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d34:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a44      	ldr	r2, [pc, #272]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d3e:	6113      	str	r3, [r2, #16]
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	493f      	ldr	r1, [pc, #252]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	670b      	str	r3, [r1, #112]	; 0x70
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	75bb      	strb	r3, [r7, #22]
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8085 	beq.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d72:	2b28      	cmp	r3, #40	; 0x28
 8003d74:	d866      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003e59 	.word	0x08003e59
 8003d80:	08003e45 	.word	0x08003e45
 8003d84:	08003e45 	.word	0x08003e45
 8003d88:	08003e45 	.word	0x08003e45
 8003d8c:	08003e45 	.word	0x08003e45
 8003d90:	08003e45 	.word	0x08003e45
 8003d94:	08003e45 	.word	0x08003e45
 8003d98:	08003e45 	.word	0x08003e45
 8003d9c:	08003e21 	.word	0x08003e21
 8003da0:	08003e45 	.word	0x08003e45
 8003da4:	08003e45 	.word	0x08003e45
 8003da8:	08003e45 	.word	0x08003e45
 8003dac:	08003e45 	.word	0x08003e45
 8003db0:	08003e45 	.word	0x08003e45
 8003db4:	08003e45 	.word	0x08003e45
 8003db8:	08003e45 	.word	0x08003e45
 8003dbc:	08003e33 	.word	0x08003e33
 8003dc0:	08003e45 	.word	0x08003e45
 8003dc4:	08003e45 	.word	0x08003e45
 8003dc8:	08003e45 	.word	0x08003e45
 8003dcc:	08003e45 	.word	0x08003e45
 8003dd0:	08003e45 	.word	0x08003e45
 8003dd4:	08003e45 	.word	0x08003e45
 8003dd8:	08003e45 	.word	0x08003e45
 8003ddc:	08003e59 	.word	0x08003e59
 8003de0:	08003e45 	.word	0x08003e45
 8003de4:	08003e45 	.word	0x08003e45
 8003de8:	08003e45 	.word	0x08003e45
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e45 	.word	0x08003e45
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	08003e45 	.word	0x08003e45
 8003dfc:	08003e59 	.word	0x08003e59
 8003e00:	08003e45 	.word	0x08003e45
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e45 	.word	0x08003e45
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e59 	.word	0x08003e59
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fdfa 	bl	8004a20 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e30:	e013      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3324      	adds	r3, #36	; 0x24
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fea3 	bl	8004b84 <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e42:	e00a      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
      break;
 8003e48:	e007      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e4a:	bf00      	nop
 8003e4c:	58024400 	.word	0x58024400
 8003e50:	58024800 	.word	0x58024800
 8003e54:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e60:	4b96      	ldr	r3, [pc, #600]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6c:	4993      	ldr	r1, [pc, #588]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	654b      	str	r3, [r1, #84]	; 0x54
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d038      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d821      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003ebf 	.word	0x08003ebf
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fdb4 	bl	8004a20 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ebc:	e00c      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fe5d 	bl	8004b84 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ede:	4b77      	ldr	r3, [pc, #476]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4974      	ldr	r1, [pc, #464]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	654b      	str	r3, [r1, #84]	; 0x54
 8003ef0:	e001      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d821      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f57 	.word	0x08003f57
 8003f18:	08003f2d 	.word	0x08003f2d
 8003f1c:	08003f3f 	.word	0x08003f3f
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fd74 	bl	8004a20 <RCCEx_PLL2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3324      	adds	r3, #36	; 0x24
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fe1d 	bl	8004b84 <RCCEx_PLL3_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f5e:	4b57      	ldr	r3, [pc, #348]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	4953      	ldr	r1, [pc, #332]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	658b      	str	r3, [r1, #88]	; 0x58
 8003f72:	e001      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d04b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8e:	d02e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f94:	d828      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d02a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d822      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa6:	d026      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fac:	d81c      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb2:	d010      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb8:	d816      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01d      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc2:	d111      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fd28 	bl	8004a20 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e012      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fdd1 	bl	8004b84 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fe6:	e009      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004010:	492a      	ldr	r1, [pc, #168]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	654b      	str	r3, [r1, #84]	; 0x54
 8004016:	e001      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004032:	d02e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004038:	d828      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d02a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d822      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d026      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800404c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004050:	d81c      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d010      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d816      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01d      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d111      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fcd6 	bl	8004a20 <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004078:	e012      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd7f 	bl	8004b84 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800409e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80040bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d04b      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040da:	d02e      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80040dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040e0:	d828      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d02a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ec:	d822      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f2:	d026      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80040f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f8:	d81c      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fe:	d010      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004104:	d816      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01d      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d111      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fc82 	bl	8004a20 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004120:	e012      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fd2b 	bl	8004b84 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004132:	e009      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800413a:	bf00      	nop
 800413c:	e004      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800414e:	4b9d      	ldr	r3, [pc, #628]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415c:	4999      	ldr	r1, [pc, #612]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800415e:	4313      	orrs	r3, r2
 8004160:	658b      	str	r3, [r1, #88]	; 0x58
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d10a      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fcfc 	bl	8004b84 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004196:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a4:	4987      	ldr	r1, [pc, #540]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c0:	d10a      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3324      	adds	r3, #36	; 0x24
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fcdb 	bl	8004b84 <RCCEx_PLL3_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	4977      	ldr	r1, [pc, #476]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d034      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004202:	d01d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d817      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004212:	d009      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004214:	e011      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fbff 	bl	8004a20 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004226:	e00c      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	2102      	movs	r1, #2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fca8 	bl	8004b84 <RCCEx_PLL3_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
      break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004256:	495b      	ldr	r1, [pc, #364]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004258:	4313      	orrs	r3, r2
 800425a:	658b      	str	r3, [r1, #88]	; 0x58
 800425c:	e001      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d033      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004278:	d01c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800427a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800427e:	d816      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800428a:	d007      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800428c:	e00f      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fc6e 	bl	8004b84 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	493e      	ldr	r1, [pc, #248]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	654b      	str	r3, [r1, #84]	; 0x54
 80042d0:	e001      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d029      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d007      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042fe:	e00b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fb8a 	bl	8004a20 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
      break;
 8004316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	4926      	ldr	r1, [pc, #152]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800432c:	4313      	orrs	r3, r2
 800432e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fc1b 	bl	8004b84 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d033      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d017      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d811      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d013      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d80b      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d106      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a0d      	ldr	r2, [pc, #52]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004396:	e007      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e004      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80043a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ba:	4902      	ldr	r1, [pc, #8]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	654b      	str	r3, [r1, #84]	; 0x54
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043d8:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	492e      	ldr	r1, [pc, #184]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004404:	4926      	ldr	r1, [pc, #152]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004406:	4313      	orrs	r3, r2
 8004408:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004422:	491f      	ldr	r1, [pc, #124]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004424:	4313      	orrs	r3, r2
 8004426:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800443a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800443e:	6113      	str	r3, [r2, #16]
 8004440:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800444a:	4915      	ldr	r1, [pc, #84]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	da08      	bge.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800445a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	490e      	ldr	r1, [pc, #56]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004466:	4313      	orrs	r3, r2
 8004468:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	4906      	ldr	r1, [pc, #24]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004486:	4313      	orrs	r3, r2
 8004488:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800448a:	7dbb      	ldrb	r3, [r7, #22]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400

080044a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044a8:	f7ff f85a 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4904      	ldr	r1, [pc, #16]	; (80044cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	58024400 	.word	0x58024400
 80044cc:	08006fb8 	.word	0x08006fb8

080044d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d8:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80044e2:	4b9f      	ldr	r3, [pc, #636]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	0b1b      	lsrs	r3, r3, #12
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ee:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80044fa:	4b99      	ldr	r3, [pc, #612]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8111 	beq.w	8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b02      	cmp	r3, #2
 8004522:	f000 8083 	beq.w	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f200 80a1 	bhi.w	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d056      	beq.n	80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800453a:	e099      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02d      	beq.n	80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004548:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a84      	ldr	r2, [pc, #528]	; (8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045a2:	e087      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800476c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e6:	e065      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800462a:	e043      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466e:	e021      	b.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046da:	ee17 2a90 	vmov	r2, s15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800472a:	edd7 6a07 	vldr	s13, [r7, #28]
 800472e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4af42400 	.word	0x4af42400

08004778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004780:	4ba1      	ldr	r3, [pc, #644]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800478a:	4b9f      	ldr	r3, [pc, #636]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	0d1b      	lsrs	r3, r3, #20
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004796:	4b9c      	ldr	r3, [pc, #624]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80047a2:	4b99      	ldr	r3, [pc, #612]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8111 	beq.w	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	f000 8083 	beq.w	80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f200 80a1 	bhi.w	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d056      	beq.n	8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047e2:	e099      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e4:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02d      	beq.n	800484c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047f0:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	08db      	lsrs	r3, r3, #3
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	4a84      	ldr	r2, [pc, #528]	; (8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800484a:	e087      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800488e:	e065      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048d2:	e043      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004916:	e021      	b.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800495a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004976:	edd7 6a07 	vldr	s13, [r7, #28]
 800497a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	ee17 2a90 	vmov	r2, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049de:	ee17 2a90 	vmov	r2, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	46000000 	.word	0x46000000
 8004a14:	4c742400 	.word	0x4c742400
 8004a18:	4a742400 	.word	0x4a742400
 8004a1c:	4af42400 	.word	0x4af42400

08004a20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2e:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d101      	bne.n	8004a3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e099      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4e      	ldr	r2, [pc, #312]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fc fbc5 	bl	80011d8 <HAL_GetTick>
 8004a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a52:	f7fc fbc1 	bl	80011d8 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e086      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a64:	4b45      	ldr	r3, [pc, #276]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	493f      	ldr	r1, [pc, #252]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	628b      	str	r3, [r1, #40]	; 0x28
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	025b      	lsls	r3, r3, #9
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab4:	4931      	ldr	r1, [pc, #196]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	492d      	ldr	r1, [pc, #180]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f023 0220 	bic.w	r2, r3, #32
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4928      	ldr	r1, [pc, #160]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <RCCEx_PLL2_Config+0x160>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	69d2      	ldr	r2, [r2, #28]
 8004af6:	00d2      	lsls	r2, r2, #3
 8004af8:	4920      	ldr	r1, [pc, #128]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004afe:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b04:	f043 0310 	orr.w	r3, r3, #16
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b1c:	e00f      	b.n	8004b3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d106      	bne.n	8004b32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b24:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b30:	e005      	b.n	8004b3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fb45 	bl	80011d8 <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b52:	f7fc fb41 	bl	80011d8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e006      	b.n	8004b72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <RCCEx_PLL2_Config+0x15c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	ffff0007 	.word	0xffff0007

08004b84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d101      	bne.n	8004ba2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e099      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fc fb13 	bl	80011d8 <HAL_GetTick>
 8004bb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bb6:	f7fc fb0f 	bl	80011d8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e086      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc8:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bd4:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	051b      	lsls	r3, r3, #20
 8004be2:	493f      	ldr	r1, [pc, #252]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	628b      	str	r3, [r1, #40]	; 0x28
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	025b      	lsls	r3, r3, #9
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c18:	4931      	ldr	r1, [pc, #196]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c30:	4b2b      	ldr	r3, [pc, #172]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	4928      	ldr	r1, [pc, #160]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c42:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <RCCEx_PLL3_Config+0x160>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	69d2      	ldr	r2, [r2, #28]
 8004c5a:	00d2      	lsls	r2, r2, #3
 8004c5c:	4920      	ldr	r1, [pc, #128]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c80:	e00f      	b.n	8004ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c94:	e005      	b.n	8004ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0e      	ldr	r2, [pc, #56]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fc fa93 	bl	80011d8 <HAL_GetTick>
 8004cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cb4:	e008      	b.n	8004cc8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cb6:	f7fc fa8f 	bl	80011d8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e006      	b.n	8004cd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	ffff0007 	.word	0xffff0007

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e042      	b.n	8004d80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fc f87f 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	; 0x24
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8c2 	bl	8004eb4 <UART_SetConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e022      	b.n	8004d80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fe1e 	bl	8005984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fea5 	bl	8005ac8 <UART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 8083 	bne.w	8004eaa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Transmit+0x28>
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e07b      	b.n	8004eac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Transmit+0x3a>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e074      	b.n	8004eac <HAL_UART_Transmit+0x124>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dda:	f7fc f9fd 	bl	80011d8 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d108      	bne.n	8004e0c <HAL_UART_Transmit+0x84>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e003      	b.n	8004e14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e1c:	e02c      	b.n	8004e78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fe98 	bl	8005b5e <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e039      	b.n	8004eac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	3302      	adds	r3, #2
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e007      	b.n	8004e66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	3301      	adds	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1cc      	bne.n	8004e1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fe65 	bl	8005b5e <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e006      	b.n	8004eac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b092      	sub	sp, #72	; 0x48
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4bbe      	ldr	r3, [pc, #760]	; (80051dc <UART_SetConfig+0x328>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4ab3      	ldr	r2, [pc, #716]	; (80051e0 <UART_SetConfig+0x32c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	4baf      	ldr	r3, [pc, #700]	; (80051e4 <UART_SetConfig+0x330>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f023 010f 	bic.w	r1, r3, #15
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4aa6      	ldr	r2, [pc, #664]	; (80051e8 <UART_SetConfig+0x334>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d177      	bne.n	8005044 <UART_SetConfig+0x190>
 8004f54:	4ba5      	ldr	r3, [pc, #660]	; (80051ec <UART_SetConfig+0x338>)
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5c:	2b28      	cmp	r3, #40	; 0x28
 8004f5e:	d86d      	bhi.n	800503c <UART_SetConfig+0x188>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0xb4>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	0800500d 	.word	0x0800500d
 8004f6c:	0800503d 	.word	0x0800503d
 8004f70:	0800503d 	.word	0x0800503d
 8004f74:	0800503d 	.word	0x0800503d
 8004f78:	0800503d 	.word	0x0800503d
 8004f7c:	0800503d 	.word	0x0800503d
 8004f80:	0800503d 	.word	0x0800503d
 8004f84:	0800503d 	.word	0x0800503d
 8004f88:	08005015 	.word	0x08005015
 8004f8c:	0800503d 	.word	0x0800503d
 8004f90:	0800503d 	.word	0x0800503d
 8004f94:	0800503d 	.word	0x0800503d
 8004f98:	0800503d 	.word	0x0800503d
 8004f9c:	0800503d 	.word	0x0800503d
 8004fa0:	0800503d 	.word	0x0800503d
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	0800501d 	.word	0x0800501d
 8004fac:	0800503d 	.word	0x0800503d
 8004fb0:	0800503d 	.word	0x0800503d
 8004fb4:	0800503d 	.word	0x0800503d
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	0800503d 	.word	0x0800503d
 8004fc0:	0800503d 	.word	0x0800503d
 8004fc4:	0800503d 	.word	0x0800503d
 8004fc8:	08005025 	.word	0x08005025
 8004fcc:	0800503d 	.word	0x0800503d
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	0800503d 	.word	0x0800503d
 8004fe0:	0800503d 	.word	0x0800503d
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005035 	.word	0x08005035
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e222      	b.n	800545a <UART_SetConfig+0x5a6>
 8005014:	2304      	movs	r3, #4
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e21e      	b.n	800545a <UART_SetConfig+0x5a6>
 800501c:	2308      	movs	r3, #8
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e21a      	b.n	800545a <UART_SetConfig+0x5a6>
 8005024:	2310      	movs	r3, #16
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e216      	b.n	800545a <UART_SetConfig+0x5a6>
 800502c:	2320      	movs	r3, #32
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e212      	b.n	800545a <UART_SetConfig+0x5a6>
 8005034:	2340      	movs	r3, #64	; 0x40
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e20e      	b.n	800545a <UART_SetConfig+0x5a6>
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e20a      	b.n	800545a <UART_SetConfig+0x5a6>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a69      	ldr	r2, [pc, #420]	; (80051f0 <UART_SetConfig+0x33c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d130      	bne.n	80050b0 <UART_SetConfig+0x1fc>
 800504e:	4b67      	ldr	r3, [pc, #412]	; (80051ec <UART_SetConfig+0x338>)
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b05      	cmp	r3, #5
 8005058:	d826      	bhi.n	80050a8 <UART_SetConfig+0x1f4>
 800505a:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x1ac>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005079 	.word	0x08005079
 8005064:	08005081 	.word	0x08005081
 8005068:	08005089 	.word	0x08005089
 800506c:	08005091 	.word	0x08005091
 8005070:	08005099 	.word	0x08005099
 8005074:	080050a1 	.word	0x080050a1
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e1ec      	b.n	800545a <UART_SetConfig+0x5a6>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e1e8      	b.n	800545a <UART_SetConfig+0x5a6>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e1e4      	b.n	800545a <UART_SetConfig+0x5a6>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e1e0      	b.n	800545a <UART_SetConfig+0x5a6>
 8005098:	2320      	movs	r3, #32
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e1dc      	b.n	800545a <UART_SetConfig+0x5a6>
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e1d8      	b.n	800545a <UART_SetConfig+0x5a6>
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e1d4      	b.n	800545a <UART_SetConfig+0x5a6>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a4f      	ldr	r2, [pc, #316]	; (80051f4 <UART_SetConfig+0x340>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d130      	bne.n	800511c <UART_SetConfig+0x268>
 80050ba:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <UART_SetConfig+0x338>)
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d826      	bhi.n	8005114 <UART_SetConfig+0x260>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x218>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050e5 	.word	0x080050e5
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	080050f5 	.word	0x080050f5
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e1b6      	b.n	800545a <UART_SetConfig+0x5a6>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e1b2      	b.n	800545a <UART_SetConfig+0x5a6>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e1ae      	b.n	800545a <UART_SetConfig+0x5a6>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e1aa      	b.n	800545a <UART_SetConfig+0x5a6>
 8005104:	2320      	movs	r3, #32
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e1a6      	b.n	800545a <UART_SetConfig+0x5a6>
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e1a2      	b.n	800545a <UART_SetConfig+0x5a6>
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e19e      	b.n	800545a <UART_SetConfig+0x5a6>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <UART_SetConfig+0x344>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d130      	bne.n	8005188 <UART_SetConfig+0x2d4>
 8005126:	4b31      	ldr	r3, [pc, #196]	; (80051ec <UART_SetConfig+0x338>)
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b05      	cmp	r3, #5
 8005130:	d826      	bhi.n	8005180 <UART_SetConfig+0x2cc>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x284>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005151 	.word	0x08005151
 800513c:	08005159 	.word	0x08005159
 8005140:	08005161 	.word	0x08005161
 8005144:	08005169 	.word	0x08005169
 8005148:	08005171 	.word	0x08005171
 800514c:	08005179 	.word	0x08005179
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e180      	b.n	800545a <UART_SetConfig+0x5a6>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e17c      	b.n	800545a <UART_SetConfig+0x5a6>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e178      	b.n	800545a <UART_SetConfig+0x5a6>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e174      	b.n	800545a <UART_SetConfig+0x5a6>
 8005170:	2320      	movs	r3, #32
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e170      	b.n	800545a <UART_SetConfig+0x5a6>
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e16c      	b.n	800545a <UART_SetConfig+0x5a6>
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e168      	b.n	800545a <UART_SetConfig+0x5a6>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <UART_SetConfig+0x348>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d142      	bne.n	8005218 <UART_SetConfig+0x364>
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <UART_SetConfig+0x338>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b05      	cmp	r3, #5
 800519c:	d838      	bhi.n	8005210 <UART_SetConfig+0x35c>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x2f0>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	080051cd 	.word	0x080051cd
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	08005201 	.word	0x08005201
 80051b8:	08005209 	.word	0x08005209
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e14a      	b.n	800545a <UART_SetConfig+0x5a6>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e146      	b.n	800545a <UART_SetConfig+0x5a6>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e142      	b.n	800545a <UART_SetConfig+0x5a6>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e13e      	b.n	800545a <UART_SetConfig+0x5a6>
 80051dc:	cfff69f3 	.word	0xcfff69f3
 80051e0:	58000c00 	.word	0x58000c00
 80051e4:	11fff4ff 	.word	0x11fff4ff
 80051e8:	40011000 	.word	0x40011000
 80051ec:	58024400 	.word	0x58024400
 80051f0:	40004400 	.word	0x40004400
 80051f4:	40004800 	.word	0x40004800
 80051f8:	40004c00 	.word	0x40004c00
 80051fc:	40005000 	.word	0x40005000
 8005200:	2320      	movs	r3, #32
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e128      	b.n	800545a <UART_SetConfig+0x5a6>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e124      	b.n	800545a <UART_SetConfig+0x5a6>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e120      	b.n	800545a <UART_SetConfig+0x5a6>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4acb      	ldr	r2, [pc, #812]	; (800554c <UART_SetConfig+0x698>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d176      	bne.n	8005310 <UART_SetConfig+0x45c>
 8005222:	4bcb      	ldr	r3, [pc, #812]	; (8005550 <UART_SetConfig+0x69c>)
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522a:	2b28      	cmp	r3, #40	; 0x28
 800522c:	d86c      	bhi.n	8005308 <UART_SetConfig+0x454>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0x380>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	080052d9 	.word	0x080052d9
 8005238:	08005309 	.word	0x08005309
 800523c:	08005309 	.word	0x08005309
 8005240:	08005309 	.word	0x08005309
 8005244:	08005309 	.word	0x08005309
 8005248:	08005309 	.word	0x08005309
 800524c:	08005309 	.word	0x08005309
 8005250:	08005309 	.word	0x08005309
 8005254:	080052e1 	.word	0x080052e1
 8005258:	08005309 	.word	0x08005309
 800525c:	08005309 	.word	0x08005309
 8005260:	08005309 	.word	0x08005309
 8005264:	08005309 	.word	0x08005309
 8005268:	08005309 	.word	0x08005309
 800526c:	08005309 	.word	0x08005309
 8005270:	08005309 	.word	0x08005309
 8005274:	080052e9 	.word	0x080052e9
 8005278:	08005309 	.word	0x08005309
 800527c:	08005309 	.word	0x08005309
 8005280:	08005309 	.word	0x08005309
 8005284:	08005309 	.word	0x08005309
 8005288:	08005309 	.word	0x08005309
 800528c:	08005309 	.word	0x08005309
 8005290:	08005309 	.word	0x08005309
 8005294:	080052f1 	.word	0x080052f1
 8005298:	08005309 	.word	0x08005309
 800529c:	08005309 	.word	0x08005309
 80052a0:	08005309 	.word	0x08005309
 80052a4:	08005309 	.word	0x08005309
 80052a8:	08005309 	.word	0x08005309
 80052ac:	08005309 	.word	0x08005309
 80052b0:	08005309 	.word	0x08005309
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	08005309 	.word	0x08005309
 80052bc:	08005309 	.word	0x08005309
 80052c0:	08005309 	.word	0x08005309
 80052c4:	08005309 	.word	0x08005309
 80052c8:	08005309 	.word	0x08005309
 80052cc:	08005309 	.word	0x08005309
 80052d0:	08005309 	.word	0x08005309
 80052d4:	08005301 	.word	0x08005301
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e0bc      	b.n	800545a <UART_SetConfig+0x5a6>
 80052e0:	2304      	movs	r3, #4
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e0b8      	b.n	800545a <UART_SetConfig+0x5a6>
 80052e8:	2308      	movs	r3, #8
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e0b4      	b.n	800545a <UART_SetConfig+0x5a6>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e0b0      	b.n	800545a <UART_SetConfig+0x5a6>
 80052f8:	2320      	movs	r3, #32
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e0ac      	b.n	800545a <UART_SetConfig+0x5a6>
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e0a8      	b.n	800545a <UART_SetConfig+0x5a6>
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e0a4      	b.n	800545a <UART_SetConfig+0x5a6>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a8f      	ldr	r2, [pc, #572]	; (8005554 <UART_SetConfig+0x6a0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d130      	bne.n	800537c <UART_SetConfig+0x4c8>
 800531a:	4b8d      	ldr	r3, [pc, #564]	; (8005550 <UART_SetConfig+0x69c>)
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b05      	cmp	r3, #5
 8005324:	d826      	bhi.n	8005374 <UART_SetConfig+0x4c0>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x478>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005345 	.word	0x08005345
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005355 	.word	0x08005355
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e086      	b.n	800545a <UART_SetConfig+0x5a6>
 800534c:	2304      	movs	r3, #4
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e082      	b.n	800545a <UART_SetConfig+0x5a6>
 8005354:	2308      	movs	r3, #8
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e07e      	b.n	800545a <UART_SetConfig+0x5a6>
 800535c:	2310      	movs	r3, #16
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e07a      	b.n	800545a <UART_SetConfig+0x5a6>
 8005364:	2320      	movs	r3, #32
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e076      	b.n	800545a <UART_SetConfig+0x5a6>
 800536c:	2340      	movs	r3, #64	; 0x40
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e072      	b.n	800545a <UART_SetConfig+0x5a6>
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e06e      	b.n	800545a <UART_SetConfig+0x5a6>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a75      	ldr	r2, [pc, #468]	; (8005558 <UART_SetConfig+0x6a4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d130      	bne.n	80053e8 <UART_SetConfig+0x534>
 8005386:	4b72      	ldr	r3, [pc, #456]	; (8005550 <UART_SetConfig+0x69c>)
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b05      	cmp	r3, #5
 8005390:	d826      	bhi.n	80053e0 <UART_SetConfig+0x52c>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x4e4>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b6:	e050      	b.n	800545a <UART_SetConfig+0x5a6>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e04c      	b.n	800545a <UART_SetConfig+0x5a6>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e048      	b.n	800545a <UART_SetConfig+0x5a6>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e044      	b.n	800545a <UART_SetConfig+0x5a6>
 80053d0:	2320      	movs	r3, #32
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e040      	b.n	800545a <UART_SetConfig+0x5a6>
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e03c      	b.n	800545a <UART_SetConfig+0x5a6>
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e038      	b.n	800545a <UART_SetConfig+0x5a6>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5b      	ldr	r2, [pc, #364]	; (800555c <UART_SetConfig+0x6a8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d130      	bne.n	8005454 <UART_SetConfig+0x5a0>
 80053f2:	4b57      	ldr	r3, [pc, #348]	; (8005550 <UART_SetConfig+0x69c>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b05      	cmp	r3, #5
 80053fc:	d826      	bhi.n	800544c <UART_SetConfig+0x598>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x550>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005425 	.word	0x08005425
 800540c:	0800542d 	.word	0x0800542d
 8005410:	08005435 	.word	0x08005435
 8005414:	0800543d 	.word	0x0800543d
 8005418:	08005445 	.word	0x08005445
 800541c:	2302      	movs	r3, #2
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e01a      	b.n	800545a <UART_SetConfig+0x5a6>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e016      	b.n	800545a <UART_SetConfig+0x5a6>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e012      	b.n	800545a <UART_SetConfig+0x5a6>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e00e      	b.n	800545a <UART_SetConfig+0x5a6>
 800543c:	2320      	movs	r3, #32
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e00a      	b.n	800545a <UART_SetConfig+0x5a6>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e006      	b.n	800545a <UART_SetConfig+0x5a6>
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e002      	b.n	800545a <UART_SetConfig+0x5a6>
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a3f      	ldr	r2, [pc, #252]	; (800555c <UART_SetConfig+0x6a8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	f040 80f8 	bne.w	8005656 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800546a:	2b20      	cmp	r3, #32
 800546c:	dc46      	bgt.n	80054fc <UART_SetConfig+0x648>
 800546e:	2b02      	cmp	r3, #2
 8005470:	f2c0 8082 	blt.w	8005578 <UART_SetConfig+0x6c4>
 8005474:	3b02      	subs	r3, #2
 8005476:	2b1e      	cmp	r3, #30
 8005478:	d87e      	bhi.n	8005578 <UART_SetConfig+0x6c4>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x5cc>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	08005503 	.word	0x08005503
 8005484:	08005579 	.word	0x08005579
 8005488:	0800550b 	.word	0x0800550b
 800548c:	08005579 	.word	0x08005579
 8005490:	08005579 	.word	0x08005579
 8005494:	08005579 	.word	0x08005579
 8005498:	0800551b 	.word	0x0800551b
 800549c:	08005579 	.word	0x08005579
 80054a0:	08005579 	.word	0x08005579
 80054a4:	08005579 	.word	0x08005579
 80054a8:	08005579 	.word	0x08005579
 80054ac:	08005579 	.word	0x08005579
 80054b0:	08005579 	.word	0x08005579
 80054b4:	08005579 	.word	0x08005579
 80054b8:	0800552b 	.word	0x0800552b
 80054bc:	08005579 	.word	0x08005579
 80054c0:	08005579 	.word	0x08005579
 80054c4:	08005579 	.word	0x08005579
 80054c8:	08005579 	.word	0x08005579
 80054cc:	08005579 	.word	0x08005579
 80054d0:	08005579 	.word	0x08005579
 80054d4:	08005579 	.word	0x08005579
 80054d8:	08005579 	.word	0x08005579
 80054dc:	08005579 	.word	0x08005579
 80054e0:	08005579 	.word	0x08005579
 80054e4:	08005579 	.word	0x08005579
 80054e8:	08005579 	.word	0x08005579
 80054ec:	08005579 	.word	0x08005579
 80054f0:	08005579 	.word	0x08005579
 80054f4:	08005579 	.word	0x08005579
 80054f8:	0800556b 	.word	0x0800556b
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d037      	beq.n	8005570 <UART_SetConfig+0x6bc>
 8005500:	e03a      	b.n	8005578 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005502:	f7fe ffcf 	bl	80044a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005508:	e03c      	b.n	8005584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe ffde 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005518:	e034      	b.n	8005584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800551a:	f107 0318 	add.w	r3, r7, #24
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff f92a 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005528:	e02c      	b.n	8005584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <UART_SetConfig+0x69c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <UART_SetConfig+0x69c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	08db      	lsrs	r3, r3, #3
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	4a07      	ldr	r2, [pc, #28]	; (8005560 <UART_SetConfig+0x6ac>)
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005548:	e01c      	b.n	8005584 <UART_SetConfig+0x6d0>
 800554a:	bf00      	nop
 800554c:	40011400 	.word	0x40011400
 8005550:	58024400 	.word	0x58024400
 8005554:	40007800 	.word	0x40007800
 8005558:	40007c00 	.word	0x40007c00
 800555c:	58000c00 	.word	0x58000c00
 8005560:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005564:	4b9d      	ldr	r3, [pc, #628]	; (80057dc <UART_SetConfig+0x928>)
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005568:	e00c      	b.n	8005584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800556a:	4b9d      	ldr	r3, [pc, #628]	; (80057e0 <UART_SetConfig+0x92c>)
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800556e:	e009      	b.n	8005584 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005576:	e005      	b.n	8005584 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005582:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 81de 	beq.w	8005948 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	4a94      	ldr	r2, [pc, #592]	; (80057e4 <UART_SetConfig+0x930>)
 8005592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005596:	461a      	mov	r2, r3
 8005598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559a:	fbb3 f3f2 	udiv	r3, r3, r2
 800559e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d305      	bcc.n	80055bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d903      	bls.n	80055c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055c2:	e1c1      	b.n	8005948 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	2200      	movs	r2, #0
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	60fa      	str	r2, [r7, #12]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	4a84      	ldr	r2, [pc, #528]	; (80057e4 <UART_SetConfig+0x930>)
 80055d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e6:	f7fa fecb 	bl	8000380 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	020b      	lsls	r3, r1, #8
 80055fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005600:	0202      	lsls	r2, r0, #8
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	6849      	ldr	r1, [r1, #4]
 8005606:	0849      	lsrs	r1, r1, #1
 8005608:	2000      	movs	r0, #0
 800560a:	460c      	mov	r4, r1
 800560c:	4605      	mov	r5, r0
 800560e:	eb12 0804 	adds.w	r8, r2, r4
 8005612:	eb43 0905 	adc.w	r9, r3, r5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	469a      	mov	sl, r3
 800561e:	4693      	mov	fp, r2
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fa feaa 	bl	8000380 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d308      	bcc.n	800564e <UART_SetConfig+0x79a>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005642:	d204      	bcs.n	800564e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	e17c      	b.n	8005948 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005654:	e178      	b.n	8005948 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565e:	f040 80c5 	bne.w	80057ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005666:	2b20      	cmp	r3, #32
 8005668:	dc48      	bgt.n	80056fc <UART_SetConfig+0x848>
 800566a:	2b00      	cmp	r3, #0
 800566c:	db7b      	blt.n	8005766 <UART_SetConfig+0x8b2>
 800566e:	2b20      	cmp	r3, #32
 8005670:	d879      	bhi.n	8005766 <UART_SetConfig+0x8b2>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x7c4>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	08005703 	.word	0x08005703
 800567c:	0800570b 	.word	0x0800570b
 8005680:	08005767 	.word	0x08005767
 8005684:	08005767 	.word	0x08005767
 8005688:	08005713 	.word	0x08005713
 800568c:	08005767 	.word	0x08005767
 8005690:	08005767 	.word	0x08005767
 8005694:	08005767 	.word	0x08005767
 8005698:	08005723 	.word	0x08005723
 800569c:	08005767 	.word	0x08005767
 80056a0:	08005767 	.word	0x08005767
 80056a4:	08005767 	.word	0x08005767
 80056a8:	08005767 	.word	0x08005767
 80056ac:	08005767 	.word	0x08005767
 80056b0:	08005767 	.word	0x08005767
 80056b4:	08005767 	.word	0x08005767
 80056b8:	08005733 	.word	0x08005733
 80056bc:	08005767 	.word	0x08005767
 80056c0:	08005767 	.word	0x08005767
 80056c4:	08005767 	.word	0x08005767
 80056c8:	08005767 	.word	0x08005767
 80056cc:	08005767 	.word	0x08005767
 80056d0:	08005767 	.word	0x08005767
 80056d4:	08005767 	.word	0x08005767
 80056d8:	08005767 	.word	0x08005767
 80056dc:	08005767 	.word	0x08005767
 80056e0:	08005767 	.word	0x08005767
 80056e4:	08005767 	.word	0x08005767
 80056e8:	08005767 	.word	0x08005767
 80056ec:	08005767 	.word	0x08005767
 80056f0:	08005767 	.word	0x08005767
 80056f4:	08005767 	.word	0x08005767
 80056f8:	08005759 	.word	0x08005759
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d02e      	beq.n	800575e <UART_SetConfig+0x8aa>
 8005700:	e031      	b.n	8005766 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005702:	f7fd ff5d 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005708:	e033      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570a:	f7fd ff6f 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 800570e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005710:	e02f      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe feda 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005720:	e027      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005722:	f107 0318 	add.w	r3, r7, #24
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f826 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005730:	e01f      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005732:	4b2d      	ldr	r3, [pc, #180]	; (80057e8 <UART_SetConfig+0x934>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800573e:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <UART_SetConfig+0x934>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	4a24      	ldr	r2, [pc, #144]	; (80057dc <UART_SetConfig+0x928>)
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005750:	e00f      	b.n	8005772 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005752:	4b22      	ldr	r3, [pc, #136]	; (80057dc <UART_SetConfig+0x928>)
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005756:	e00c      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005758:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <UART_SetConfig+0x92c>)
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800575c:	e009      	b.n	8005772 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005764:	e005      	b.n	8005772 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80e7 	beq.w	8005948 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <UART_SetConfig+0x930>)
 8005780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005784:	461a      	mov	r2, r3
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	fbb3 f3f2 	udiv	r3, r3, r2
 800578c:	005a      	lsls	r2, r3, #1
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	441a      	add	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d916      	bls.n	80057d4 <UART_SetConfig+0x920>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d212      	bcs.n	80057d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f023 030f 	bic.w	r3, r3, #15
 80057b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057c6:	4313      	orrs	r3, r2
 80057c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	e0b9      	b.n	8005948 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057da:	e0b5      	b.n	8005948 <UART_SetConfig+0xa94>
 80057dc:	03d09000 	.word	0x03d09000
 80057e0:	003d0900 	.word	0x003d0900
 80057e4:	08006fd8 	.word	0x08006fd8
 80057e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	dc49      	bgt.n	8005888 <UART_SetConfig+0x9d4>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db7c      	blt.n	80058f2 <UART_SetConfig+0xa3e>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d87a      	bhi.n	80058f2 <UART_SetConfig+0xa3e>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x950>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	0800588f 	.word	0x0800588f
 8005808:	08005897 	.word	0x08005897
 800580c:	080058f3 	.word	0x080058f3
 8005810:	080058f3 	.word	0x080058f3
 8005814:	0800589f 	.word	0x0800589f
 8005818:	080058f3 	.word	0x080058f3
 800581c:	080058f3 	.word	0x080058f3
 8005820:	080058f3 	.word	0x080058f3
 8005824:	080058af 	.word	0x080058af
 8005828:	080058f3 	.word	0x080058f3
 800582c:	080058f3 	.word	0x080058f3
 8005830:	080058f3 	.word	0x080058f3
 8005834:	080058f3 	.word	0x080058f3
 8005838:	080058f3 	.word	0x080058f3
 800583c:	080058f3 	.word	0x080058f3
 8005840:	080058f3 	.word	0x080058f3
 8005844:	080058bf 	.word	0x080058bf
 8005848:	080058f3 	.word	0x080058f3
 800584c:	080058f3 	.word	0x080058f3
 8005850:	080058f3 	.word	0x080058f3
 8005854:	080058f3 	.word	0x080058f3
 8005858:	080058f3 	.word	0x080058f3
 800585c:	080058f3 	.word	0x080058f3
 8005860:	080058f3 	.word	0x080058f3
 8005864:	080058f3 	.word	0x080058f3
 8005868:	080058f3 	.word	0x080058f3
 800586c:	080058f3 	.word	0x080058f3
 8005870:	080058f3 	.word	0x080058f3
 8005874:	080058f3 	.word	0x080058f3
 8005878:	080058f3 	.word	0x080058f3
 800587c:	080058f3 	.word	0x080058f3
 8005880:	080058f3 	.word	0x080058f3
 8005884:	080058e5 	.word	0x080058e5
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d02e      	beq.n	80058ea <UART_SetConfig+0xa36>
 800588c:	e031      	b.n	80058f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fd fe97 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005894:	e033      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005896:	f7fd fea9 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 800589a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800589c:	e02f      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800589e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fe14 	bl	80044d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ac:	e027      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ae:	f107 0318 	add.w	r3, r7, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe ff60 	bl	8004778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058bc:	e01f      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058be:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <UART_SetConfig+0xac0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ca:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <UART_SetConfig+0xac0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	08db      	lsrs	r3, r3, #3
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <UART_SetConfig+0xac4>)
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058dc:	e00f      	b.n	80058fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <UART_SetConfig+0xac4>)
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e2:	e00c      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <UART_SetConfig+0xac8>)
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e8:	e009      	b.n	80058fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f0:	e005      	b.n	80058fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058fc:	bf00      	nop
    }

    if (pclk != 0U)
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d021      	beq.n	8005948 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <UART_SetConfig+0xacc>)
 800590a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590e:	461a      	mov	r2, r3
 8005910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005912:	fbb3 f2f2 	udiv	r2, r3, r2
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	441a      	add	r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d909      	bls.n	8005942 <UART_SetConfig+0xa8e>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d205      	bcs.n	8005942 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	b29a      	uxth	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	e002      	b.n	8005948 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2201      	movs	r2, #1
 800594c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005964:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005968:	4618      	mov	r0, r3
 800596a:	3748      	adds	r7, #72	; 0x48
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	03d09000 	.word	0x03d09000
 800597c:	003d0900 	.word	0x003d0900
 8005980:	08006fd8 	.word	0x08006fd8

08005984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a82:	d10a      	bne.n	8005a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ad8:	f7fb fb7e 	bl	80011d8 <HAL_GetTick>
 8005adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d10e      	bne.n	8005b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f82f 	bl	8005b5e <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e025      	b.n	8005b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d10e      	bne.n	8005b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f819 	bl	8005b5e <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e00f      	b.n	8005b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b09c      	sub	sp, #112	; 0x70
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6e:	e0a9      	b.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	f000 80a5 	beq.w	8005cc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7a:	f7fb fb2d 	bl	80011d8 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d302      	bcc.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d140      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e6      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005be2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e069      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d051      	beq.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2e:	d149      	bne.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e6      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c8c:	623a      	str	r2, [r7, #32]
 8005c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	69f9      	ldr	r1, [r7, #28]
 8005c92:	6a3a      	ldr	r2, [r7, #32]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e010      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	f43f af46 	beq.w	8005b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3770      	adds	r7, #112	; 0x70
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e027      	b.n	8005d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	; 0x24
 8005d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e02d      	b.n	8005dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f84f 	bl	8005e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e02d      	b.n	8005e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f811 	bl	8005e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d108      	bne.n	8005e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e78:	e031      	b.n	8005ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e7e:	2310      	movs	r3, #16
 8005e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	0e5b      	lsrs	r3, r3, #25
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	0f5b      	lsrs	r3, r3, #29
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	7b3a      	ldrb	r2, [r7, #12]
 8005ea6:	4911      	ldr	r1, [pc, #68]	; (8005eec <UARTEx_SetNbDataToProcess+0x94>)
 8005ea8:	5c8a      	ldrb	r2, [r1, r2]
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eae:	7b3a      	ldrb	r2, [r7, #12]
 8005eb0:	490f      	ldr	r1, [pc, #60]	; (8005ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8005eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	7b7a      	ldrb	r2, [r7, #13]
 8005ec4:	4909      	ldr	r1, [pc, #36]	; (8005eec <UARTEx_SetNbDataToProcess+0x94>)
 8005ec6:	5c8a      	ldrb	r2, [r1, r2]
 8005ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ecc:	7b7a      	ldrb	r2, [r7, #13]
 8005ece:	4908      	ldr	r1, [pc, #32]	; (8005ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	08006ff0 	.word	0x08006ff0
 8005ef0:	08006ff8 	.word	0x08006ff8

08005ef4 <__errno>:
 8005ef4:	4b01      	ldr	r3, [pc, #4]	; (8005efc <__errno+0x8>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	24000018 	.word	0x24000018

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4d0d      	ldr	r5, [pc, #52]	; (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	; (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4d0b      	ldr	r5, [pc, #44]	; (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	; (8005f44 <__libc_init_array+0x44>)
 8005f14:	f000 ffbc 	bl	8006e90 <_init>
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f28:	4798      	blx	r3
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f32:	4798      	blx	r3
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	080070a0 	.word	0x080070a0
 8005f3c:	080070a0 	.word	0x080070a0
 8005f40:	080070a0 	.word	0x080070a0
 8005f44:	080070a4 	.word	0x080070a4

08005f48 <memcpy>:
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f50:	d100      	bne.n	8005f54 <memcpy+0xc>
 8005f52:	4770      	bx	lr
 8005f54:	b510      	push	{r4, lr}
 8005f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	d1f9      	bne.n	8005f56 <memcpy+0xe>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <memset>:
 8005f64:	4402      	add	r2, r0
 8005f66:	4603      	mov	r3, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <iprintf>:
 8005f74:	b40f      	push	{r0, r1, r2, r3}
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <iprintf+0x2c>)
 8005f78:	b513      	push	{r0, r1, r4, lr}
 8005f7a:	681c      	ldr	r4, [r3, #0]
 8005f7c:	b124      	cbz	r4, 8005f88 <iprintf+0x14>
 8005f7e:	69a3      	ldr	r3, [r4, #24]
 8005f80:	b913      	cbnz	r3, 8005f88 <iprintf+0x14>
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 f866 	bl	8006054 <__sinit>
 8005f88:	ab05      	add	r3, sp, #20
 8005f8a:	9a04      	ldr	r2, [sp, #16]
 8005f8c:	68a1      	ldr	r1, [r4, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f9bd 	bl	8006310 <_vfiprintf_r>
 8005f96:	b002      	add	sp, #8
 8005f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9c:	b004      	add	sp, #16
 8005f9e:	4770      	bx	lr
 8005fa0:	24000018 	.word	0x24000018

08005fa4 <std>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	4604      	mov	r4, r0
 8005faa:	e9c0 3300 	strd	r3, r3, [r0]
 8005fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fb2:	6083      	str	r3, [r0, #8]
 8005fb4:	8181      	strh	r1, [r0, #12]
 8005fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8005fb8:	81c2      	strh	r2, [r0, #14]
 8005fba:	6183      	str	r3, [r0, #24]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	305c      	adds	r0, #92	; 0x5c
 8005fc2:	f7ff ffcf 	bl	8005f64 <memset>
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <std+0x38>)
 8005fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <std+0x3c>)
 8005fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <std+0x40>)
 8005fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <std+0x44>)
 8005fd4:	6224      	str	r4, [r4, #32]
 8005fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	bf00      	nop
 8005fdc:	080068b9 	.word	0x080068b9
 8005fe0:	080068db 	.word	0x080068db
 8005fe4:	08006913 	.word	0x08006913
 8005fe8:	08006937 	.word	0x08006937

08005fec <_cleanup_r>:
 8005fec:	4901      	ldr	r1, [pc, #4]	; (8005ff4 <_cleanup_r+0x8>)
 8005fee:	f000 b8af 	b.w	8006150 <_fwalk_reent>
 8005ff2:	bf00      	nop
 8005ff4:	08006c11 	.word	0x08006c11

08005ff8 <__sfmoreglue>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	2268      	movs	r2, #104	; 0x68
 8005ffc:	1e4d      	subs	r5, r1, #1
 8005ffe:	4355      	muls	r5, r2
 8006000:	460e      	mov	r6, r1
 8006002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006006:	f000 f8e5 	bl	80061d4 <_malloc_r>
 800600a:	4604      	mov	r4, r0
 800600c:	b140      	cbz	r0, 8006020 <__sfmoreglue+0x28>
 800600e:	2100      	movs	r1, #0
 8006010:	e9c0 1600 	strd	r1, r6, [r0]
 8006014:	300c      	adds	r0, #12
 8006016:	60a0      	str	r0, [r4, #8]
 8006018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800601c:	f7ff ffa2 	bl	8005f64 <memset>
 8006020:	4620      	mov	r0, r4
 8006022:	bd70      	pop	{r4, r5, r6, pc}

08006024 <__sfp_lock_acquire>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__sfp_lock_acquire+0x8>)
 8006026:	f000 b8b3 	b.w	8006190 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	24000245 	.word	0x24000245

08006030 <__sfp_lock_release>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__sfp_lock_release+0x8>)
 8006032:	f000 b8ae 	b.w	8006192 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	24000245 	.word	0x24000245

0800603c <__sinit_lock_acquire>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__sinit_lock_acquire+0x8>)
 800603e:	f000 b8a7 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8006042:	bf00      	nop
 8006044:	24000246 	.word	0x24000246

08006048 <__sinit_lock_release>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__sinit_lock_release+0x8>)
 800604a:	f000 b8a2 	b.w	8006192 <__retarget_lock_release_recursive>
 800604e:	bf00      	nop
 8006050:	24000246 	.word	0x24000246

08006054 <__sinit>:
 8006054:	b510      	push	{r4, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	f7ff fff0 	bl	800603c <__sinit_lock_acquire>
 800605c:	69a3      	ldr	r3, [r4, #24]
 800605e:	b11b      	cbz	r3, 8006068 <__sinit+0x14>
 8006060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006064:	f7ff bff0 	b.w	8006048 <__sinit_lock_release>
 8006068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800606c:	6523      	str	r3, [r4, #80]	; 0x50
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <__sinit+0x68>)
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <__sinit+0x6c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	62a2      	str	r2, [r4, #40]	; 0x28
 8006076:	42a3      	cmp	r3, r4
 8006078:	bf04      	itt	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	61a3      	streq	r3, [r4, #24]
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f820 	bl	80060c4 <__sfp>
 8006084:	6060      	str	r0, [r4, #4]
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f81c 	bl	80060c4 <__sfp>
 800608c:	60a0      	str	r0, [r4, #8]
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f818 	bl	80060c4 <__sfp>
 8006094:	2200      	movs	r2, #0
 8006096:	60e0      	str	r0, [r4, #12]
 8006098:	2104      	movs	r1, #4
 800609a:	6860      	ldr	r0, [r4, #4]
 800609c:	f7ff ff82 	bl	8005fa4 <std>
 80060a0:	68a0      	ldr	r0, [r4, #8]
 80060a2:	2201      	movs	r2, #1
 80060a4:	2109      	movs	r1, #9
 80060a6:	f7ff ff7d 	bl	8005fa4 <std>
 80060aa:	68e0      	ldr	r0, [r4, #12]
 80060ac:	2202      	movs	r2, #2
 80060ae:	2112      	movs	r1, #18
 80060b0:	f7ff ff78 	bl	8005fa4 <std>
 80060b4:	2301      	movs	r3, #1
 80060b6:	61a3      	str	r3, [r4, #24]
 80060b8:	e7d2      	b.n	8006060 <__sinit+0xc>
 80060ba:	bf00      	nop
 80060bc:	08007000 	.word	0x08007000
 80060c0:	08005fed 	.word	0x08005fed

080060c4 <__sfp>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	4607      	mov	r7, r0
 80060c8:	f7ff ffac 	bl	8006024 <__sfp_lock_acquire>
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <__sfp+0x84>)
 80060ce:	681e      	ldr	r6, [r3, #0]
 80060d0:	69b3      	ldr	r3, [r6, #24]
 80060d2:	b913      	cbnz	r3, 80060da <__sfp+0x16>
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff ffbd 	bl	8006054 <__sinit>
 80060da:	3648      	adds	r6, #72	; 0x48
 80060dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	d503      	bpl.n	80060ec <__sfp+0x28>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	b30b      	cbz	r3, 800612c <__sfp+0x68>
 80060e8:	6836      	ldr	r6, [r6, #0]
 80060ea:	e7f7      	b.n	80060dc <__sfp+0x18>
 80060ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060f0:	b9d5      	cbnz	r5, 8006128 <__sfp+0x64>
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <__sfp+0x88>)
 80060f4:	60e3      	str	r3, [r4, #12]
 80060f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060fa:	6665      	str	r5, [r4, #100]	; 0x64
 80060fc:	f000 f847 	bl	800618e <__retarget_lock_init_recursive>
 8006100:	f7ff ff96 	bl	8006030 <__sfp_lock_release>
 8006104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800610c:	6025      	str	r5, [r4, #0]
 800610e:	61a5      	str	r5, [r4, #24]
 8006110:	2208      	movs	r2, #8
 8006112:	4629      	mov	r1, r5
 8006114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006118:	f7ff ff24 	bl	8005f64 <memset>
 800611c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006124:	4620      	mov	r0, r4
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	3468      	adds	r4, #104	; 0x68
 800612a:	e7d9      	b.n	80060e0 <__sfp+0x1c>
 800612c:	2104      	movs	r1, #4
 800612e:	4638      	mov	r0, r7
 8006130:	f7ff ff62 	bl	8005ff8 <__sfmoreglue>
 8006134:	4604      	mov	r4, r0
 8006136:	6030      	str	r0, [r6, #0]
 8006138:	2800      	cmp	r0, #0
 800613a:	d1d5      	bne.n	80060e8 <__sfp+0x24>
 800613c:	f7ff ff78 	bl	8006030 <__sfp_lock_release>
 8006140:	230c      	movs	r3, #12
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	e7ee      	b.n	8006124 <__sfp+0x60>
 8006146:	bf00      	nop
 8006148:	08007000 	.word	0x08007000
 800614c:	ffff0001 	.word	0xffff0001

08006150 <_fwalk_reent>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4606      	mov	r6, r0
 8006156:	4688      	mov	r8, r1
 8006158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800615c:	2700      	movs	r7, #0
 800615e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006162:	f1b9 0901 	subs.w	r9, r9, #1
 8006166:	d505      	bpl.n	8006174 <_fwalk_reent+0x24>
 8006168:	6824      	ldr	r4, [r4, #0]
 800616a:	2c00      	cmp	r4, #0
 800616c:	d1f7      	bne.n	800615e <_fwalk_reent+0xe>
 800616e:	4638      	mov	r0, r7
 8006170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006174:	89ab      	ldrh	r3, [r5, #12]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d907      	bls.n	800618a <_fwalk_reent+0x3a>
 800617a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800617e:	3301      	adds	r3, #1
 8006180:	d003      	beq.n	800618a <_fwalk_reent+0x3a>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	47c0      	blx	r8
 8006188:	4307      	orrs	r7, r0
 800618a:	3568      	adds	r5, #104	; 0x68
 800618c:	e7e9      	b.n	8006162 <_fwalk_reent+0x12>

0800618e <__retarget_lock_init_recursive>:
 800618e:	4770      	bx	lr

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <sbrk_aligned>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4e0e      	ldr	r6, [pc, #56]	; (80061d0 <sbrk_aligned+0x3c>)
 8006198:	460c      	mov	r4, r1
 800619a:	6831      	ldr	r1, [r6, #0]
 800619c:	4605      	mov	r5, r0
 800619e:	b911      	cbnz	r1, 80061a6 <sbrk_aligned+0x12>
 80061a0:	f000 fb7a 	bl	8006898 <_sbrk_r>
 80061a4:	6030      	str	r0, [r6, #0]
 80061a6:	4621      	mov	r1, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 fb75 	bl	8006898 <_sbrk_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	d00a      	beq.n	80061c8 <sbrk_aligned+0x34>
 80061b2:	1cc4      	adds	r4, r0, #3
 80061b4:	f024 0403 	bic.w	r4, r4, #3
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d007      	beq.n	80061cc <sbrk_aligned+0x38>
 80061bc:	1a21      	subs	r1, r4, r0
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 fb6a 	bl	8006898 <_sbrk_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d101      	bne.n	80061cc <sbrk_aligned+0x38>
 80061c8:	f04f 34ff 	mov.w	r4, #4294967295
 80061cc:	4620      	mov	r0, r4
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	2400024c 	.word	0x2400024c

080061d4 <_malloc_r>:
 80061d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d8:	1ccd      	adds	r5, r1, #3
 80061da:	f025 0503 	bic.w	r5, r5, #3
 80061de:	3508      	adds	r5, #8
 80061e0:	2d0c      	cmp	r5, #12
 80061e2:	bf38      	it	cc
 80061e4:	250c      	movcc	r5, #12
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	4607      	mov	r7, r0
 80061ea:	db01      	blt.n	80061f0 <_malloc_r+0x1c>
 80061ec:	42a9      	cmp	r1, r5
 80061ee:	d905      	bls.n	80061fc <_malloc_r+0x28>
 80061f0:	230c      	movs	r3, #12
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	2600      	movs	r6, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	4e2e      	ldr	r6, [pc, #184]	; (80062b8 <_malloc_r+0xe4>)
 80061fe:	f000 fdbb 	bl	8006d78 <__malloc_lock>
 8006202:	6833      	ldr	r3, [r6, #0]
 8006204:	461c      	mov	r4, r3
 8006206:	bb34      	cbnz	r4, 8006256 <_malloc_r+0x82>
 8006208:	4629      	mov	r1, r5
 800620a:	4638      	mov	r0, r7
 800620c:	f7ff ffc2 	bl	8006194 <sbrk_aligned>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	4604      	mov	r4, r0
 8006214:	d14d      	bne.n	80062b2 <_malloc_r+0xde>
 8006216:	6834      	ldr	r4, [r6, #0]
 8006218:	4626      	mov	r6, r4
 800621a:	2e00      	cmp	r6, #0
 800621c:	d140      	bne.n	80062a0 <_malloc_r+0xcc>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	4631      	mov	r1, r6
 8006222:	4638      	mov	r0, r7
 8006224:	eb04 0803 	add.w	r8, r4, r3
 8006228:	f000 fb36 	bl	8006898 <_sbrk_r>
 800622c:	4580      	cmp	r8, r0
 800622e:	d13a      	bne.n	80062a6 <_malloc_r+0xd2>
 8006230:	6821      	ldr	r1, [r4, #0]
 8006232:	3503      	adds	r5, #3
 8006234:	1a6d      	subs	r5, r5, r1
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	4629      	mov	r1, r5
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff ffa5 	bl	8006194 <sbrk_aligned>
 800624a:	3001      	adds	r0, #1
 800624c:	d02b      	beq.n	80062a6 <_malloc_r+0xd2>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	442b      	add	r3, r5
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	e00e      	b.n	8006274 <_malloc_r+0xa0>
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	1b52      	subs	r2, r2, r5
 800625a:	d41e      	bmi.n	800629a <_malloc_r+0xc6>
 800625c:	2a0b      	cmp	r2, #11
 800625e:	d916      	bls.n	800628e <_malloc_r+0xba>
 8006260:	1961      	adds	r1, r4, r5
 8006262:	42a3      	cmp	r3, r4
 8006264:	6025      	str	r5, [r4, #0]
 8006266:	bf18      	it	ne
 8006268:	6059      	strne	r1, [r3, #4]
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	bf08      	it	eq
 800626e:	6031      	streq	r1, [r6, #0]
 8006270:	5162      	str	r2, [r4, r5]
 8006272:	604b      	str	r3, [r1, #4]
 8006274:	4638      	mov	r0, r7
 8006276:	f104 060b 	add.w	r6, r4, #11
 800627a:	f000 fd83 	bl	8006d84 <__malloc_unlock>
 800627e:	f026 0607 	bic.w	r6, r6, #7
 8006282:	1d23      	adds	r3, r4, #4
 8006284:	1af2      	subs	r2, r6, r3
 8006286:	d0b6      	beq.n	80061f6 <_malloc_r+0x22>
 8006288:	1b9b      	subs	r3, r3, r6
 800628a:	50a3      	str	r3, [r4, r2]
 800628c:	e7b3      	b.n	80061f6 <_malloc_r+0x22>
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	42a3      	cmp	r3, r4
 8006292:	bf0c      	ite	eq
 8006294:	6032      	streq	r2, [r6, #0]
 8006296:	605a      	strne	r2, [r3, #4]
 8006298:	e7ec      	b.n	8006274 <_malloc_r+0xa0>
 800629a:	4623      	mov	r3, r4
 800629c:	6864      	ldr	r4, [r4, #4]
 800629e:	e7b2      	b.n	8006206 <_malloc_r+0x32>
 80062a0:	4634      	mov	r4, r6
 80062a2:	6876      	ldr	r6, [r6, #4]
 80062a4:	e7b9      	b.n	800621a <_malloc_r+0x46>
 80062a6:	230c      	movs	r3, #12
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4638      	mov	r0, r7
 80062ac:	f000 fd6a 	bl	8006d84 <__malloc_unlock>
 80062b0:	e7a1      	b.n	80061f6 <_malloc_r+0x22>
 80062b2:	6025      	str	r5, [r4, #0]
 80062b4:	e7de      	b.n	8006274 <_malloc_r+0xa0>
 80062b6:	bf00      	nop
 80062b8:	24000248 	.word	0x24000248

080062bc <__sfputc_r>:
 80062bc:	6893      	ldr	r3, [r2, #8]
 80062be:	3b01      	subs	r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	b410      	push	{r4}
 80062c4:	6093      	str	r3, [r2, #8]
 80062c6:	da08      	bge.n	80062da <__sfputc_r+0x1e>
 80062c8:	6994      	ldr	r4, [r2, #24]
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	db01      	blt.n	80062d2 <__sfputc_r+0x16>
 80062ce:	290a      	cmp	r1, #10
 80062d0:	d103      	bne.n	80062da <__sfputc_r+0x1e>
 80062d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062d6:	f000 bb33 	b.w	8006940 <__swbuf_r>
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	1c58      	adds	r0, r3, #1
 80062de:	6010      	str	r0, [r2, #0]
 80062e0:	7019      	strb	r1, [r3, #0]
 80062e2:	4608      	mov	r0, r1
 80062e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <__sfputs_r>:
 80062ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ec:	4606      	mov	r6, r0
 80062ee:	460f      	mov	r7, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	18d5      	adds	r5, r2, r3
 80062f4:	42ac      	cmp	r4, r5
 80062f6:	d101      	bne.n	80062fc <__sfputs_r+0x12>
 80062f8:	2000      	movs	r0, #0
 80062fa:	e007      	b.n	800630c <__sfputs_r+0x22>
 80062fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006300:	463a      	mov	r2, r7
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff ffda 	bl	80062bc <__sfputc_r>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d1f3      	bne.n	80062f4 <__sfputs_r+0xa>
 800630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006310 <_vfiprintf_r>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	460d      	mov	r5, r1
 8006316:	b09d      	sub	sp, #116	; 0x74
 8006318:	4614      	mov	r4, r2
 800631a:	4698      	mov	r8, r3
 800631c:	4606      	mov	r6, r0
 800631e:	b118      	cbz	r0, 8006328 <_vfiprintf_r+0x18>
 8006320:	6983      	ldr	r3, [r0, #24]
 8006322:	b90b      	cbnz	r3, 8006328 <_vfiprintf_r+0x18>
 8006324:	f7ff fe96 	bl	8006054 <__sinit>
 8006328:	4b89      	ldr	r3, [pc, #548]	; (8006550 <_vfiprintf_r+0x240>)
 800632a:	429d      	cmp	r5, r3
 800632c:	d11b      	bne.n	8006366 <_vfiprintf_r+0x56>
 800632e:	6875      	ldr	r5, [r6, #4]
 8006330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	d405      	bmi.n	8006342 <_vfiprintf_r+0x32>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	059a      	lsls	r2, r3, #22
 800633a:	d402      	bmi.n	8006342 <_vfiprintf_r+0x32>
 800633c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633e:	f7ff ff27 	bl	8006190 <__retarget_lock_acquire_recursive>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	071b      	lsls	r3, r3, #28
 8006346:	d501      	bpl.n	800634c <_vfiprintf_r+0x3c>
 8006348:	692b      	ldr	r3, [r5, #16]
 800634a:	b9eb      	cbnz	r3, 8006388 <_vfiprintf_r+0x78>
 800634c:	4629      	mov	r1, r5
 800634e:	4630      	mov	r0, r6
 8006350:	f000 fb5a 	bl	8006a08 <__swsetup_r>
 8006354:	b1c0      	cbz	r0, 8006388 <_vfiprintf_r+0x78>
 8006356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006358:	07dc      	lsls	r4, r3, #31
 800635a:	d50e      	bpl.n	800637a <_vfiprintf_r+0x6a>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	b01d      	add	sp, #116	; 0x74
 8006362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	4b7b      	ldr	r3, [pc, #492]	; (8006554 <_vfiprintf_r+0x244>)
 8006368:	429d      	cmp	r5, r3
 800636a:	d101      	bne.n	8006370 <_vfiprintf_r+0x60>
 800636c:	68b5      	ldr	r5, [r6, #8]
 800636e:	e7df      	b.n	8006330 <_vfiprintf_r+0x20>
 8006370:	4b79      	ldr	r3, [pc, #484]	; (8006558 <_vfiprintf_r+0x248>)
 8006372:	429d      	cmp	r5, r3
 8006374:	bf08      	it	eq
 8006376:	68f5      	ldreq	r5, [r6, #12]
 8006378:	e7da      	b.n	8006330 <_vfiprintf_r+0x20>
 800637a:	89ab      	ldrh	r3, [r5, #12]
 800637c:	0598      	lsls	r0, r3, #22
 800637e:	d4ed      	bmi.n	800635c <_vfiprintf_r+0x4c>
 8006380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006382:	f7ff ff06 	bl	8006192 <__retarget_lock_release_recursive>
 8006386:	e7e9      	b.n	800635c <_vfiprintf_r+0x4c>
 8006388:	2300      	movs	r3, #0
 800638a:	9309      	str	r3, [sp, #36]	; 0x24
 800638c:	2320      	movs	r3, #32
 800638e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006392:	f8cd 800c 	str.w	r8, [sp, #12]
 8006396:	2330      	movs	r3, #48	; 0x30
 8006398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800655c <_vfiprintf_r+0x24c>
 800639c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a0:	f04f 0901 	mov.w	r9, #1
 80063a4:	4623      	mov	r3, r4
 80063a6:	469a      	mov	sl, r3
 80063a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ac:	b10a      	cbz	r2, 80063b2 <_vfiprintf_r+0xa2>
 80063ae:	2a25      	cmp	r2, #37	; 0x25
 80063b0:	d1f9      	bne.n	80063a6 <_vfiprintf_r+0x96>
 80063b2:	ebba 0b04 	subs.w	fp, sl, r4
 80063b6:	d00b      	beq.n	80063d0 <_vfiprintf_r+0xc0>
 80063b8:	465b      	mov	r3, fp
 80063ba:	4622      	mov	r2, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff ff93 	bl	80062ea <__sfputs_r>
 80063c4:	3001      	adds	r0, #1
 80063c6:	f000 80aa 	beq.w	800651e <_vfiprintf_r+0x20e>
 80063ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063cc:	445a      	add	r2, fp
 80063ce:	9209      	str	r2, [sp, #36]	; 0x24
 80063d0:	f89a 3000 	ldrb.w	r3, [sl]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80a2 	beq.w	800651e <_vfiprintf_r+0x20e>
 80063da:	2300      	movs	r3, #0
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e4:	f10a 0a01 	add.w	sl, sl, #1
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	9307      	str	r3, [sp, #28]
 80063ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063f0:	931a      	str	r3, [sp, #104]	; 0x68
 80063f2:	4654      	mov	r4, sl
 80063f4:	2205      	movs	r2, #5
 80063f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fa:	4858      	ldr	r0, [pc, #352]	; (800655c <_vfiprintf_r+0x24c>)
 80063fc:	f7f9 ff70 	bl	80002e0 <memchr>
 8006400:	9a04      	ldr	r2, [sp, #16]
 8006402:	b9d8      	cbnz	r0, 800643c <_vfiprintf_r+0x12c>
 8006404:	06d1      	lsls	r1, r2, #27
 8006406:	bf44      	itt	mi
 8006408:	2320      	movmi	r3, #32
 800640a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640e:	0713      	lsls	r3, r2, #28
 8006410:	bf44      	itt	mi
 8006412:	232b      	movmi	r3, #43	; 0x2b
 8006414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006418:	f89a 3000 	ldrb.w	r3, [sl]
 800641c:	2b2a      	cmp	r3, #42	; 0x2a
 800641e:	d015      	beq.n	800644c <_vfiprintf_r+0x13c>
 8006420:	9a07      	ldr	r2, [sp, #28]
 8006422:	4654      	mov	r4, sl
 8006424:	2000      	movs	r0, #0
 8006426:	f04f 0c0a 	mov.w	ip, #10
 800642a:	4621      	mov	r1, r4
 800642c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006430:	3b30      	subs	r3, #48	; 0x30
 8006432:	2b09      	cmp	r3, #9
 8006434:	d94e      	bls.n	80064d4 <_vfiprintf_r+0x1c4>
 8006436:	b1b0      	cbz	r0, 8006466 <_vfiprintf_r+0x156>
 8006438:	9207      	str	r2, [sp, #28]
 800643a:	e014      	b.n	8006466 <_vfiprintf_r+0x156>
 800643c:	eba0 0308 	sub.w	r3, r0, r8
 8006440:	fa09 f303 	lsl.w	r3, r9, r3
 8006444:	4313      	orrs	r3, r2
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	46a2      	mov	sl, r4
 800644a:	e7d2      	b.n	80063f2 <_vfiprintf_r+0xe2>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	1d19      	adds	r1, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	9103      	str	r1, [sp, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfbb      	ittet	lt
 8006458:	425b      	neglt	r3, r3
 800645a:	f042 0202 	orrlt.w	r2, r2, #2
 800645e:	9307      	strge	r3, [sp, #28]
 8006460:	9307      	strlt	r3, [sp, #28]
 8006462:	bfb8      	it	lt
 8006464:	9204      	strlt	r2, [sp, #16]
 8006466:	7823      	ldrb	r3, [r4, #0]
 8006468:	2b2e      	cmp	r3, #46	; 0x2e
 800646a:	d10c      	bne.n	8006486 <_vfiprintf_r+0x176>
 800646c:	7863      	ldrb	r3, [r4, #1]
 800646e:	2b2a      	cmp	r3, #42	; 0x2a
 8006470:	d135      	bne.n	80064de <_vfiprintf_r+0x1ce>
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	9203      	str	r2, [sp, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfb8      	it	lt
 800647e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006482:	3402      	adds	r4, #2
 8006484:	9305      	str	r3, [sp, #20]
 8006486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800656c <_vfiprintf_r+0x25c>
 800648a:	7821      	ldrb	r1, [r4, #0]
 800648c:	2203      	movs	r2, #3
 800648e:	4650      	mov	r0, sl
 8006490:	f7f9 ff26 	bl	80002e0 <memchr>
 8006494:	b140      	cbz	r0, 80064a8 <_vfiprintf_r+0x198>
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	eba0 000a 	sub.w	r0, r0, sl
 800649c:	fa03 f000 	lsl.w	r0, r3, r0
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	4303      	orrs	r3, r0
 80064a4:	3401      	adds	r4, #1
 80064a6:	9304      	str	r3, [sp, #16]
 80064a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ac:	482c      	ldr	r0, [pc, #176]	; (8006560 <_vfiprintf_r+0x250>)
 80064ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b2:	2206      	movs	r2, #6
 80064b4:	f7f9 ff14 	bl	80002e0 <memchr>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d03f      	beq.n	800653c <_vfiprintf_r+0x22c>
 80064bc:	4b29      	ldr	r3, [pc, #164]	; (8006564 <_vfiprintf_r+0x254>)
 80064be:	bb1b      	cbnz	r3, 8006508 <_vfiprintf_r+0x1f8>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	3307      	adds	r3, #7
 80064c4:	f023 0307 	bic.w	r3, r3, #7
 80064c8:	3308      	adds	r3, #8
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ce:	443b      	add	r3, r7
 80064d0:	9309      	str	r3, [sp, #36]	; 0x24
 80064d2:	e767      	b.n	80063a4 <_vfiprintf_r+0x94>
 80064d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064d8:	460c      	mov	r4, r1
 80064da:	2001      	movs	r0, #1
 80064dc:	e7a5      	b.n	800642a <_vfiprintf_r+0x11a>
 80064de:	2300      	movs	r3, #0
 80064e0:	3401      	adds	r4, #1
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	4619      	mov	r1, r3
 80064e6:	f04f 0c0a 	mov.w	ip, #10
 80064ea:	4620      	mov	r0, r4
 80064ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064f0:	3a30      	subs	r2, #48	; 0x30
 80064f2:	2a09      	cmp	r2, #9
 80064f4:	d903      	bls.n	80064fe <_vfiprintf_r+0x1ee>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0c5      	beq.n	8006486 <_vfiprintf_r+0x176>
 80064fa:	9105      	str	r1, [sp, #20]
 80064fc:	e7c3      	b.n	8006486 <_vfiprintf_r+0x176>
 80064fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006502:	4604      	mov	r4, r0
 8006504:	2301      	movs	r3, #1
 8006506:	e7f0      	b.n	80064ea <_vfiprintf_r+0x1da>
 8006508:	ab03      	add	r3, sp, #12
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	462a      	mov	r2, r5
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <_vfiprintf_r+0x258>)
 8006510:	a904      	add	r1, sp, #16
 8006512:	4630      	mov	r0, r6
 8006514:	f3af 8000 	nop.w
 8006518:	4607      	mov	r7, r0
 800651a:	1c78      	adds	r0, r7, #1
 800651c:	d1d6      	bne.n	80064cc <_vfiprintf_r+0x1bc>
 800651e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006520:	07d9      	lsls	r1, r3, #31
 8006522:	d405      	bmi.n	8006530 <_vfiprintf_r+0x220>
 8006524:	89ab      	ldrh	r3, [r5, #12]
 8006526:	059a      	lsls	r2, r3, #22
 8006528:	d402      	bmi.n	8006530 <_vfiprintf_r+0x220>
 800652a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652c:	f7ff fe31 	bl	8006192 <__retarget_lock_release_recursive>
 8006530:	89ab      	ldrh	r3, [r5, #12]
 8006532:	065b      	lsls	r3, r3, #25
 8006534:	f53f af12 	bmi.w	800635c <_vfiprintf_r+0x4c>
 8006538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800653a:	e711      	b.n	8006360 <_vfiprintf_r+0x50>
 800653c:	ab03      	add	r3, sp, #12
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	462a      	mov	r2, r5
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <_vfiprintf_r+0x258>)
 8006544:	a904      	add	r1, sp, #16
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f880 	bl	800664c <_printf_i>
 800654c:	e7e4      	b.n	8006518 <_vfiprintf_r+0x208>
 800654e:	bf00      	nop
 8006550:	08007024 	.word	0x08007024
 8006554:	08007044 	.word	0x08007044
 8006558:	08007004 	.word	0x08007004
 800655c:	08007064 	.word	0x08007064
 8006560:	0800706e 	.word	0x0800706e
 8006564:	00000000 	.word	0x00000000
 8006568:	080062eb 	.word	0x080062eb
 800656c:	0800706a 	.word	0x0800706a

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4699      	mov	r9, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006580:	4293      	cmp	r3, r2
 8006582:	bfb8      	it	lt
 8006584:	4613      	movlt	r3, r2
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800658c:	4607      	mov	r7, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc26      	bgt.n	8006606 <_printf_common+0x96>
 80065b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065bc:	1e13      	subs	r3, r2, #0
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d42b      	bmi.n	8006620 <_printf_common+0xb0>
 80065c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065cc:	4649      	mov	r1, r9
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d01e      	beq.n	8006614 <_printf_common+0xa4>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	68e5      	ldr	r5, [r4, #12]
 80065da:	6832      	ldr	r2, [r6, #0]
 80065dc:	f003 0306 	and.w	r3, r3, #6
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	bf08      	it	eq
 80065e4:	1aad      	subeq	r5, r5, r2
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	6922      	ldr	r2, [r4, #16]
 80065ea:	bf0c      	ite	eq
 80065ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f0:	2500      	movne	r5, #0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfc4      	itt	gt
 80065f6:	1a9b      	subgt	r3, r3, r2
 80065f8:	18ed      	addgt	r5, r5, r3
 80065fa:	2600      	movs	r6, #0
 80065fc:	341a      	adds	r4, #26
 80065fe:	42b5      	cmp	r5, r6
 8006600:	d11a      	bne.n	8006638 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e008      	b.n	8006618 <_printf_common+0xa8>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4649      	mov	r1, r9
 800660c:	4638      	mov	r0, r7
 800660e:	47c0      	blx	r8
 8006610:	3001      	adds	r0, #1
 8006612:	d103      	bne.n	800661c <_printf_common+0xac>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	3501      	adds	r5, #1
 800661e:	e7c6      	b.n	80065ae <_printf_common+0x3e>
 8006620:	18e1      	adds	r1, r4, r3
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	2030      	movs	r0, #48	; 0x30
 8006626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800662a:	4422      	add	r2, r4
 800662c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006634:	3302      	adds	r3, #2
 8006636:	e7c7      	b.n	80065c8 <_printf_common+0x58>
 8006638:	2301      	movs	r3, #1
 800663a:	4622      	mov	r2, r4
 800663c:	4649      	mov	r1, r9
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	3001      	adds	r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa4>
 8006646:	3601      	adds	r6, #1
 8006648:	e7d9      	b.n	80065fe <_printf_common+0x8e>
	...

0800664c <_printf_i>:
 800664c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	7e0f      	ldrb	r7, [r1, #24]
 8006652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006654:	2f78      	cmp	r7, #120	; 0x78
 8006656:	4691      	mov	r9, r2
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	469a      	mov	sl, r3
 800665e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006662:	d807      	bhi.n	8006674 <_printf_i+0x28>
 8006664:	2f62      	cmp	r7, #98	; 0x62
 8006666:	d80a      	bhi.n	800667e <_printf_i+0x32>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f000 80d8 	beq.w	800681e <_printf_i+0x1d2>
 800666e:	2f58      	cmp	r7, #88	; 0x58
 8006670:	f000 80a3 	beq.w	80067ba <_printf_i+0x16e>
 8006674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800667c:	e03a      	b.n	80066f4 <_printf_i+0xa8>
 800667e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006682:	2b15      	cmp	r3, #21
 8006684:	d8f6      	bhi.n	8006674 <_printf_i+0x28>
 8006686:	a101      	add	r1, pc, #4	; (adr r1, 800668c <_printf_i+0x40>)
 8006688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066f9 	.word	0x080066f9
 8006694:	08006675 	.word	0x08006675
 8006698:	08006675 	.word	0x08006675
 800669c:	08006675 	.word	0x08006675
 80066a0:	08006675 	.word	0x08006675
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006675 	.word	0x08006675
 80066ac:	08006675 	.word	0x08006675
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	08006805 	.word	0x08006805
 80066bc:	08006729 	.word	0x08006729
 80066c0:	080067e7 	.word	0x080067e7
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	08006827 	.word	0x08006827
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006729 	.word	0x08006729
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067ef 	.word	0x080067ef
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	602a      	str	r2, [r5, #0]
 80066ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0a3      	b.n	8006840 <_printf_i+0x1f4>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	6829      	ldr	r1, [r5, #0]
 80066fc:	0606      	lsls	r6, r0, #24
 80066fe:	f101 0304 	add.w	r3, r1, #4
 8006702:	d50a      	bpl.n	800671a <_printf_i+0xce>
 8006704:	680e      	ldr	r6, [r1, #0]
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	2e00      	cmp	r6, #0
 800670a:	da03      	bge.n	8006714 <_printf_i+0xc8>
 800670c:	232d      	movs	r3, #45	; 0x2d
 800670e:	4276      	negs	r6, r6
 8006710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006714:	485e      	ldr	r0, [pc, #376]	; (8006890 <_printf_i+0x244>)
 8006716:	230a      	movs	r3, #10
 8006718:	e019      	b.n	800674e <_printf_i+0x102>
 800671a:	680e      	ldr	r6, [r1, #0]
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006722:	bf18      	it	ne
 8006724:	b236      	sxthne	r6, r6
 8006726:	e7ef      	b.n	8006708 <_printf_i+0xbc>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	1d19      	adds	r1, r3, #4
 800672e:	6029      	str	r1, [r5, #0]
 8006730:	0601      	lsls	r1, r0, #24
 8006732:	d501      	bpl.n	8006738 <_printf_i+0xec>
 8006734:	681e      	ldr	r6, [r3, #0]
 8006736:	e002      	b.n	800673e <_printf_i+0xf2>
 8006738:	0646      	lsls	r6, r0, #25
 800673a:	d5fb      	bpl.n	8006734 <_printf_i+0xe8>
 800673c:	881e      	ldrh	r6, [r3, #0]
 800673e:	4854      	ldr	r0, [pc, #336]	; (8006890 <_printf_i+0x244>)
 8006740:	2f6f      	cmp	r7, #111	; 0x6f
 8006742:	bf0c      	ite	eq
 8006744:	2308      	moveq	r3, #8
 8006746:	230a      	movne	r3, #10
 8006748:	2100      	movs	r1, #0
 800674a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800674e:	6865      	ldr	r5, [r4, #4]
 8006750:	60a5      	str	r5, [r4, #8]
 8006752:	2d00      	cmp	r5, #0
 8006754:	bfa2      	ittt	ge
 8006756:	6821      	ldrge	r1, [r4, #0]
 8006758:	f021 0104 	bicge.w	r1, r1, #4
 800675c:	6021      	strge	r1, [r4, #0]
 800675e:	b90e      	cbnz	r6, 8006764 <_printf_i+0x118>
 8006760:	2d00      	cmp	r5, #0
 8006762:	d04d      	beq.n	8006800 <_printf_i+0x1b4>
 8006764:	4615      	mov	r5, r2
 8006766:	fbb6 f1f3 	udiv	r1, r6, r3
 800676a:	fb03 6711 	mls	r7, r3, r1, r6
 800676e:	5dc7      	ldrb	r7, [r0, r7]
 8006770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006774:	4637      	mov	r7, r6
 8006776:	42bb      	cmp	r3, r7
 8006778:	460e      	mov	r6, r1
 800677a:	d9f4      	bls.n	8006766 <_printf_i+0x11a>
 800677c:	2b08      	cmp	r3, #8
 800677e:	d10b      	bne.n	8006798 <_printf_i+0x14c>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	07de      	lsls	r6, r3, #31
 8006784:	d508      	bpl.n	8006798 <_printf_i+0x14c>
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	6861      	ldr	r1, [r4, #4]
 800678a:	4299      	cmp	r1, r3
 800678c:	bfde      	ittt	le
 800678e:	2330      	movle	r3, #48	; 0x30
 8006790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006798:	1b52      	subs	r2, r2, r5
 800679a:	6122      	str	r2, [r4, #16]
 800679c:	f8cd a000 	str.w	sl, [sp]
 80067a0:	464b      	mov	r3, r9
 80067a2:	aa03      	add	r2, sp, #12
 80067a4:	4621      	mov	r1, r4
 80067a6:	4640      	mov	r0, r8
 80067a8:	f7ff fee2 	bl	8006570 <_printf_common>
 80067ac:	3001      	adds	r0, #1
 80067ae:	d14c      	bne.n	800684a <_printf_i+0x1fe>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	b004      	add	sp, #16
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	4835      	ldr	r0, [pc, #212]	; (8006890 <_printf_i+0x244>)
 80067bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067c0:	6829      	ldr	r1, [r5, #0]
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067c8:	6029      	str	r1, [r5, #0]
 80067ca:	061d      	lsls	r5, r3, #24
 80067cc:	d514      	bpl.n	80067f8 <_printf_i+0x1ac>
 80067ce:	07df      	lsls	r7, r3, #31
 80067d0:	bf44      	itt	mi
 80067d2:	f043 0320 	orrmi.w	r3, r3, #32
 80067d6:	6023      	strmi	r3, [r4, #0]
 80067d8:	b91e      	cbnz	r6, 80067e2 <_printf_i+0x196>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f023 0320 	bic.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2310      	movs	r3, #16
 80067e4:	e7b0      	b.n	8006748 <_printf_i+0xfc>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	f043 0320 	orr.w	r3, r3, #32
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	2378      	movs	r3, #120	; 0x78
 80067f0:	4828      	ldr	r0, [pc, #160]	; (8006894 <_printf_i+0x248>)
 80067f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067f6:	e7e3      	b.n	80067c0 <_printf_i+0x174>
 80067f8:	0659      	lsls	r1, r3, #25
 80067fa:	bf48      	it	mi
 80067fc:	b2b6      	uxthmi	r6, r6
 80067fe:	e7e6      	b.n	80067ce <_printf_i+0x182>
 8006800:	4615      	mov	r5, r2
 8006802:	e7bb      	b.n	800677c <_printf_i+0x130>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	6826      	ldr	r6, [r4, #0]
 8006808:	6961      	ldr	r1, [r4, #20]
 800680a:	1d18      	adds	r0, r3, #4
 800680c:	6028      	str	r0, [r5, #0]
 800680e:	0635      	lsls	r5, r6, #24
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	d501      	bpl.n	8006818 <_printf_i+0x1cc>
 8006814:	6019      	str	r1, [r3, #0]
 8006816:	e002      	b.n	800681e <_printf_i+0x1d2>
 8006818:	0670      	lsls	r0, r6, #25
 800681a:	d5fb      	bpl.n	8006814 <_printf_i+0x1c8>
 800681c:	8019      	strh	r1, [r3, #0]
 800681e:	2300      	movs	r3, #0
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	4615      	mov	r5, r2
 8006824:	e7ba      	b.n	800679c <_printf_i+0x150>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	1d1a      	adds	r2, r3, #4
 800682a:	602a      	str	r2, [r5, #0]
 800682c:	681d      	ldr	r5, [r3, #0]
 800682e:	6862      	ldr	r2, [r4, #4]
 8006830:	2100      	movs	r1, #0
 8006832:	4628      	mov	r0, r5
 8006834:	f7f9 fd54 	bl	80002e0 <memchr>
 8006838:	b108      	cbz	r0, 800683e <_printf_i+0x1f2>
 800683a:	1b40      	subs	r0, r0, r5
 800683c:	6060      	str	r0, [r4, #4]
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	2300      	movs	r3, #0
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	e7a8      	b.n	800679c <_printf_i+0x150>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	462a      	mov	r2, r5
 800684e:	4649      	mov	r1, r9
 8006850:	4640      	mov	r0, r8
 8006852:	47d0      	blx	sl
 8006854:	3001      	adds	r0, #1
 8006856:	d0ab      	beq.n	80067b0 <_printf_i+0x164>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	079b      	lsls	r3, r3, #30
 800685c:	d413      	bmi.n	8006886 <_printf_i+0x23a>
 800685e:	68e0      	ldr	r0, [r4, #12]
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	4298      	cmp	r0, r3
 8006864:	bfb8      	it	lt
 8006866:	4618      	movlt	r0, r3
 8006868:	e7a4      	b.n	80067b4 <_printf_i+0x168>
 800686a:	2301      	movs	r3, #1
 800686c:	4632      	mov	r2, r6
 800686e:	4649      	mov	r1, r9
 8006870:	4640      	mov	r0, r8
 8006872:	47d0      	blx	sl
 8006874:	3001      	adds	r0, #1
 8006876:	d09b      	beq.n	80067b0 <_printf_i+0x164>
 8006878:	3501      	adds	r5, #1
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	9903      	ldr	r1, [sp, #12]
 800687e:	1a5b      	subs	r3, r3, r1
 8006880:	42ab      	cmp	r3, r5
 8006882:	dcf2      	bgt.n	800686a <_printf_i+0x21e>
 8006884:	e7eb      	b.n	800685e <_printf_i+0x212>
 8006886:	2500      	movs	r5, #0
 8006888:	f104 0619 	add.w	r6, r4, #25
 800688c:	e7f5      	b.n	800687a <_printf_i+0x22e>
 800688e:	bf00      	nop
 8006890:	08007075 	.word	0x08007075
 8006894:	08007086 	.word	0x08007086

08006898 <_sbrk_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d06      	ldr	r5, [pc, #24]	; (80068b4 <_sbrk_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	602b      	str	r3, [r5, #0]
 80068a4:	f7fa fbb2 	bl	800100c <_sbrk>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_sbrk_r+0x1a>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_sbrk_r+0x1a>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	24000250 	.word	0x24000250

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 fab2 	bl	8006e28 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	05db      	lsls	r3, r3, #23
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f0:	2302      	movs	r3, #2
 80068f2:	2200      	movs	r2, #0
 80068f4:	f000 f9c8 	bl	8006c88 <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b869 	b.w	80069e4 <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f9b5 	bl	8006c88 <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	; 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b8d3 	b.w	8006ae4 <_close_r>
	...

08006940 <__swbuf_r>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	460e      	mov	r6, r1
 8006944:	4614      	mov	r4, r2
 8006946:	4605      	mov	r5, r0
 8006948:	b118      	cbz	r0, 8006952 <__swbuf_r+0x12>
 800694a:	6983      	ldr	r3, [r0, #24]
 800694c:	b90b      	cbnz	r3, 8006952 <__swbuf_r+0x12>
 800694e:	f7ff fb81 	bl	8006054 <__sinit>
 8006952:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <__swbuf_r+0x98>)
 8006954:	429c      	cmp	r4, r3
 8006956:	d12b      	bne.n	80069b0 <__swbuf_r+0x70>
 8006958:	686c      	ldr	r4, [r5, #4]
 800695a:	69a3      	ldr	r3, [r4, #24]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	071a      	lsls	r2, r3, #28
 8006962:	d52f      	bpl.n	80069c4 <__swbuf_r+0x84>
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	b36b      	cbz	r3, 80069c4 <__swbuf_r+0x84>
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	6820      	ldr	r0, [r4, #0]
 800696c:	1ac0      	subs	r0, r0, r3
 800696e:	6963      	ldr	r3, [r4, #20]
 8006970:	b2f6      	uxtb	r6, r6
 8006972:	4283      	cmp	r3, r0
 8006974:	4637      	mov	r7, r6
 8006976:	dc04      	bgt.n	8006982 <__swbuf_r+0x42>
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f948 	bl	8006c10 <_fflush_r>
 8006980:	bb30      	cbnz	r0, 80069d0 <__swbuf_r+0x90>
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	3b01      	subs	r3, #1
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	701e      	strb	r6, [r3, #0]
 8006990:	6963      	ldr	r3, [r4, #20]
 8006992:	3001      	adds	r0, #1
 8006994:	4283      	cmp	r3, r0
 8006996:	d004      	beq.n	80069a2 <__swbuf_r+0x62>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	07db      	lsls	r3, r3, #31
 800699c:	d506      	bpl.n	80069ac <__swbuf_r+0x6c>
 800699e:	2e0a      	cmp	r6, #10
 80069a0:	d104      	bne.n	80069ac <__swbuf_r+0x6c>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 f933 	bl	8006c10 <_fflush_r>
 80069aa:	b988      	cbnz	r0, 80069d0 <__swbuf_r+0x90>
 80069ac:	4638      	mov	r0, r7
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <__swbuf_r+0x9c>)
 80069b2:	429c      	cmp	r4, r3
 80069b4:	d101      	bne.n	80069ba <__swbuf_r+0x7a>
 80069b6:	68ac      	ldr	r4, [r5, #8]
 80069b8:	e7cf      	b.n	800695a <__swbuf_r+0x1a>
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <__swbuf_r+0xa0>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	bf08      	it	eq
 80069c0:	68ec      	ldreq	r4, [r5, #12]
 80069c2:	e7ca      	b.n	800695a <__swbuf_r+0x1a>
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 f81e 	bl	8006a08 <__swsetup_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0cb      	beq.n	8006968 <__swbuf_r+0x28>
 80069d0:	f04f 37ff 	mov.w	r7, #4294967295
 80069d4:	e7ea      	b.n	80069ac <__swbuf_r+0x6c>
 80069d6:	bf00      	nop
 80069d8:	08007024 	.word	0x08007024
 80069dc:	08007044 	.word	0x08007044
 80069e0:	08007004 	.word	0x08007004

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	; (8006a04 <_write_r+0x20>)
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fa fab9 	bl	8000f6a <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	24000250 	.word	0x24000250

08006a08 <__swsetup_r>:
 8006a08:	4b32      	ldr	r3, [pc, #200]	; (8006ad4 <__swsetup_r+0xcc>)
 8006a0a:	b570      	push	{r4, r5, r6, lr}
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	b125      	cbz	r5, 8006a1e <__swsetup_r+0x16>
 8006a14:	69ab      	ldr	r3, [r5, #24]
 8006a16:	b913      	cbnz	r3, 8006a1e <__swsetup_r+0x16>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff fb1b 	bl	8006054 <__sinit>
 8006a1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ad8 <__swsetup_r+0xd0>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d10f      	bne.n	8006a44 <__swsetup_r+0x3c>
 8006a24:	686c      	ldr	r4, [r5, #4]
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a2c:	0719      	lsls	r1, r3, #28
 8006a2e:	d42c      	bmi.n	8006a8a <__swsetup_r+0x82>
 8006a30:	06dd      	lsls	r5, r3, #27
 8006a32:	d411      	bmi.n	8006a58 <__swsetup_r+0x50>
 8006a34:	2309      	movs	r3, #9
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	e03e      	b.n	8006ac2 <__swsetup_r+0xba>
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <__swsetup_r+0xd4>)
 8006a46:	429c      	cmp	r4, r3
 8006a48:	d101      	bne.n	8006a4e <__swsetup_r+0x46>
 8006a4a:	68ac      	ldr	r4, [r5, #8]
 8006a4c:	e7eb      	b.n	8006a26 <__swsetup_r+0x1e>
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <__swsetup_r+0xd8>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	bf08      	it	eq
 8006a54:	68ec      	ldreq	r4, [r5, #12]
 8006a56:	e7e6      	b.n	8006a26 <__swsetup_r+0x1e>
 8006a58:	0758      	lsls	r0, r3, #29
 8006a5a:	d512      	bpl.n	8006a82 <__swsetup_r+0x7a>
 8006a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5e:	b141      	cbz	r1, 8006a72 <__swsetup_r+0x6a>
 8006a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d002      	beq.n	8006a6e <__swsetup_r+0x66>
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 f991 	bl	8006d90 <_free_r>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6363      	str	r3, [r4, #52]	; 0x34
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	b94b      	cbnz	r3, 8006aa2 <__swsetup_r+0x9a>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a98:	d003      	beq.n	8006aa2 <__swsetup_r+0x9a>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f92b 	bl	8006cf8 <__smakebuf_r>
 8006aa2:	89a0      	ldrh	r0, [r4, #12]
 8006aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aa8:	f010 0301 	ands.w	r3, r0, #1
 8006aac:	d00a      	beq.n	8006ac4 <__swsetup_r+0xbc>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60a3      	str	r3, [r4, #8]
 8006ab2:	6963      	ldr	r3, [r4, #20]
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	61a3      	str	r3, [r4, #24]
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	b943      	cbnz	r3, 8006ace <__swsetup_r+0xc6>
 8006abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ac0:	d1ba      	bne.n	8006a38 <__swsetup_r+0x30>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	0781      	lsls	r1, r0, #30
 8006ac6:	bf58      	it	pl
 8006ac8:	6963      	ldrpl	r3, [r4, #20]
 8006aca:	60a3      	str	r3, [r4, #8]
 8006acc:	e7f4      	b.n	8006ab8 <__swsetup_r+0xb0>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e7f7      	b.n	8006ac2 <__swsetup_r+0xba>
 8006ad2:	bf00      	nop
 8006ad4:	24000018 	.word	0x24000018
 8006ad8:	08007024 	.word	0x08007024
 8006adc:	08007044 	.word	0x08007044
 8006ae0:	08007004 	.word	0x08007004

08006ae4 <_close_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d06      	ldr	r5, [pc, #24]	; (8006b00 <_close_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fa fa57 	bl	8000fa2 <_close>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_close_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_close_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	24000250 	.word	0x24000250

08006b04 <__sflush_r>:
 8006b04:	898a      	ldrh	r2, [r1, #12]
 8006b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	0710      	lsls	r0, r2, #28
 8006b0e:	460c      	mov	r4, r1
 8006b10:	d458      	bmi.n	8006bc4 <__sflush_r+0xc0>
 8006b12:	684b      	ldr	r3, [r1, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc05      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc02      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d0f9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b30:	682f      	ldr	r7, [r5, #0]
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	d032      	beq.n	8006b9c <__sflush_r+0x98>
 8006b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	075a      	lsls	r2, r3, #29
 8006b3c:	d505      	bpl.n	8006b4a <__sflush_r+0x46>
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b44:	b10b      	cbz	r3, 8006b4a <__sflush_r+0x46>
 8006b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b48:	1ac0      	subs	r0, r0, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b50:	6a21      	ldr	r1, [r4, #32]
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b0      	blx	r6
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	d106      	bne.n	8006b6a <__sflush_r+0x66>
 8006b5c:	6829      	ldr	r1, [r5, #0]
 8006b5e:	291d      	cmp	r1, #29
 8006b60:	d82c      	bhi.n	8006bbc <__sflush_r+0xb8>
 8006b62:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <__sflush_r+0x108>)
 8006b64:	40ca      	lsrs	r2, r1
 8006b66:	07d6      	lsls	r6, r2, #31
 8006b68:	d528      	bpl.n	8006bbc <__sflush_r+0xb8>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6062      	str	r2, [r4, #4]
 8006b6e:	04d9      	lsls	r1, r3, #19
 8006b70:	6922      	ldr	r2, [r4, #16]
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	d504      	bpl.n	8006b80 <__sflush_r+0x7c>
 8006b76:	1c42      	adds	r2, r0, #1
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0x7a>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	b903      	cbnz	r3, 8006b80 <__sflush_r+0x7c>
 8006b7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b82:	602f      	str	r7, [r5, #0]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d0ca      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	d002      	beq.n	8006b96 <__sflush_r+0x92>
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f8fd 	bl	8006d90 <_free_r>
 8006b96:	2000      	movs	r0, #0
 8006b98:	6360      	str	r0, [r4, #52]	; 0x34
 8006b9a:	e7c1      	b.n	8006b20 <__sflush_r+0x1c>
 8006b9c:	6a21      	ldr	r1, [r4, #32]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	1c41      	adds	r1, r0, #1
 8006ba6:	d1c7      	bne.n	8006b38 <__sflush_r+0x34>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0c4      	beq.n	8006b38 <__sflush_r+0x34>
 8006bae:	2b1d      	cmp	r3, #29
 8006bb0:	d001      	beq.n	8006bb6 <__sflush_r+0xb2>
 8006bb2:	2b16      	cmp	r3, #22
 8006bb4:	d101      	bne.n	8006bba <__sflush_r+0xb6>
 8006bb6:	602f      	str	r7, [r5, #0]
 8006bb8:	e7b1      	b.n	8006b1e <__sflush_r+0x1a>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	e7ad      	b.n	8006b20 <__sflush_r+0x1c>
 8006bc4:	690f      	ldr	r7, [r1, #16]
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d0a9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006bca:	0793      	lsls	r3, r2, #30
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	bf08      	it	eq
 8006bd0:	694b      	ldreq	r3, [r1, #20]
 8006bd2:	600f      	str	r7, [r1, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	eba6 0807 	sub.w	r8, r6, r7
 8006bdc:	608b      	str	r3, [r1, #8]
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	dd9c      	ble.n	8006b1e <__sflush_r+0x1a>
 8006be4:	6a21      	ldr	r1, [r4, #32]
 8006be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006be8:	4643      	mov	r3, r8
 8006bea:	463a      	mov	r2, r7
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b0      	blx	r6
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dc06      	bgt.n	8006c02 <__sflush_r+0xfe>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	e78e      	b.n	8006b20 <__sflush_r+0x1c>
 8006c02:	4407      	add	r7, r0
 8006c04:	eba8 0800 	sub.w	r8, r8, r0
 8006c08:	e7e9      	b.n	8006bde <__sflush_r+0xda>
 8006c0a:	bf00      	nop
 8006c0c:	20400001 	.word	0x20400001

08006c10 <_fflush_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	b913      	cbnz	r3, 8006c20 <_fflush_r+0x10>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	b118      	cbz	r0, 8006c2a <_fflush_r+0x1a>
 8006c22:	6983      	ldr	r3, [r0, #24]
 8006c24:	b90b      	cbnz	r3, 8006c2a <_fflush_r+0x1a>
 8006c26:	f7ff fa15 	bl	8006054 <__sinit>
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <_fflush_r+0x6c>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d11b      	bne.n	8006c68 <_fflush_r+0x58>
 8006c30:	686c      	ldr	r4, [r5, #4]
 8006c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0ef      	beq.n	8006c1a <_fflush_r+0xa>
 8006c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c3c:	07d0      	lsls	r0, r2, #31
 8006c3e:	d404      	bmi.n	8006c4a <_fflush_r+0x3a>
 8006c40:	0599      	lsls	r1, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_fflush_r+0x3a>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f7ff faa3 	bl	8006190 <__retarget_lock_acquire_recursive>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f7ff ff59 	bl	8006b04 <__sflush_r>
 8006c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c54:	07da      	lsls	r2, r3, #31
 8006c56:	4605      	mov	r5, r0
 8006c58:	d4e0      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	d4dd      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c62:	f7ff fa96 	bl	8006192 <__retarget_lock_release_recursive>
 8006c66:	e7d9      	b.n	8006c1c <_fflush_r+0xc>
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <_fflush_r+0x70>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <_fflush_r+0x62>
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	e7df      	b.n	8006c32 <_fflush_r+0x22>
 8006c72:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <_fflush_r+0x74>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68ec      	ldreq	r4, [r5, #12]
 8006c7a:	e7da      	b.n	8006c32 <_fflush_r+0x22>
 8006c7c:	08007024 	.word	0x08007024
 8006c80:	08007044 	.word	0x08007044
 8006c84:	08007004 	.word	0x08007004

08006c88 <_lseek_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_lseek_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa f9aa 	bl	8000ff0 <_lseek>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_lseek_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_lseek_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	24000250 	.word	0x24000250

08006cac <__swhatbuf_r>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	460e      	mov	r6, r1
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	b096      	sub	sp, #88	; 0x58
 8006cb8:	4614      	mov	r4, r2
 8006cba:	461d      	mov	r5, r3
 8006cbc:	da08      	bge.n	8006cd0 <__swhatbuf_r+0x24>
 8006cbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	061a      	lsls	r2, r3, #24
 8006cc8:	d410      	bmi.n	8006cec <__swhatbuf_r+0x40>
 8006cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cce:	e00e      	b.n	8006cee <__swhatbuf_r+0x42>
 8006cd0:	466a      	mov	r2, sp
 8006cd2:	f000 f8bb 	bl	8006e4c <_fstat_r>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	dbf1      	blt.n	8006cbe <__swhatbuf_r+0x12>
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ce4:	425a      	negs	r2, r3
 8006ce6:	415a      	adcs	r2, r3
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	e7ee      	b.n	8006cca <__swhatbuf_r+0x1e>
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	2000      	movs	r0, #0
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	b016      	add	sp, #88	; 0x58
 8006cf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006cf8 <__smakebuf_r>:
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cfc:	079d      	lsls	r5, r3, #30
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	d507      	bpl.n	8006d14 <__smakebuf_r+0x1c>
 8006d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	6163      	str	r3, [r4, #20]
 8006d10:	b002      	add	sp, #8
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	ab01      	add	r3, sp, #4
 8006d16:	466a      	mov	r2, sp
 8006d18:	f7ff ffc8 	bl	8006cac <__swhatbuf_r>
 8006d1c:	9900      	ldr	r1, [sp, #0]
 8006d1e:	4605      	mov	r5, r0
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff fa57 	bl	80061d4 <_malloc_r>
 8006d26:	b948      	cbnz	r0, 8006d3c <__smakebuf_r+0x44>
 8006d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2c:	059a      	lsls	r2, r3, #22
 8006d2e:	d4ef      	bmi.n	8006d10 <__smakebuf_r+0x18>
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	f043 0302 	orr.w	r3, r3, #2
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	e7e3      	b.n	8006d04 <__smakebuf_r+0xc>
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <__smakebuf_r+0x7c>)
 8006d3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	6020      	str	r0, [r4, #0]
 8006d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	6163      	str	r3, [r4, #20]
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	6120      	str	r0, [r4, #16]
 8006d52:	b15b      	cbz	r3, 8006d6c <__smakebuf_r+0x74>
 8006d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 f889 	bl	8006e70 <_isatty_r>
 8006d5e:	b128      	cbz	r0, 8006d6c <__smakebuf_r+0x74>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	89a0      	ldrh	r0, [r4, #12]
 8006d6e:	4305      	orrs	r5, r0
 8006d70:	81a5      	strh	r5, [r4, #12]
 8006d72:	e7cd      	b.n	8006d10 <__smakebuf_r+0x18>
 8006d74:	08005fed 	.word	0x08005fed

08006d78 <__malloc_lock>:
 8006d78:	4801      	ldr	r0, [pc, #4]	; (8006d80 <__malloc_lock+0x8>)
 8006d7a:	f7ff ba09 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	24000244 	.word	0x24000244

08006d84 <__malloc_unlock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__malloc_unlock+0x8>)
 8006d86:	f7ff ba04 	b.w	8006192 <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	24000244 	.word	0x24000244

08006d90 <_free_r>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	2900      	cmp	r1, #0
 8006d94:	d044      	beq.n	8006e20 <_free_r+0x90>
 8006d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9a:	9001      	str	r0, [sp, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006da2:	bfb8      	it	lt
 8006da4:	18e4      	addlt	r4, r4, r3
 8006da6:	f7ff ffe7 	bl	8006d78 <__malloc_lock>
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <_free_r+0x94>)
 8006dac:	9801      	ldr	r0, [sp, #4]
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	b933      	cbnz	r3, 8006dc0 <_free_r+0x30>
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	6014      	str	r4, [r2, #0]
 8006db6:	b003      	add	sp, #12
 8006db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dbc:	f7ff bfe2 	b.w	8006d84 <__malloc_unlock>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d908      	bls.n	8006dd6 <_free_r+0x46>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf01      	itttt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	1949      	addeq	r1, r1, r5
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	e7ed      	b.n	8006db2 <_free_r+0x22>
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b10b      	cbz	r3, 8006de0 <_free_r+0x50>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d9fa      	bls.n	8006dd6 <_free_r+0x46>
 8006de0:	6811      	ldr	r1, [r2, #0]
 8006de2:	1855      	adds	r5, r2, r1
 8006de4:	42a5      	cmp	r5, r4
 8006de6:	d10b      	bne.n	8006e00 <_free_r+0x70>
 8006de8:	6824      	ldr	r4, [r4, #0]
 8006dea:	4421      	add	r1, r4
 8006dec:	1854      	adds	r4, r2, r1
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	6011      	str	r1, [r2, #0]
 8006df2:	d1e0      	bne.n	8006db6 <_free_r+0x26>
 8006df4:	681c      	ldr	r4, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	6053      	str	r3, [r2, #4]
 8006dfa:	4421      	add	r1, r4
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	e7da      	b.n	8006db6 <_free_r+0x26>
 8006e00:	d902      	bls.n	8006e08 <_free_r+0x78>
 8006e02:	230c      	movs	r3, #12
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	e7d6      	b.n	8006db6 <_free_r+0x26>
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf04      	itt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	bf04      	itt	eq
 8006e18:	1949      	addeq	r1, r1, r5
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	6054      	str	r4, [r2, #4]
 8006e1e:	e7ca      	b.n	8006db6 <_free_r+0x26>
 8006e20:	b003      	add	sp, #12
 8006e22:	bd30      	pop	{r4, r5, pc}
 8006e24:	24000248 	.word	0x24000248

08006e28 <_read_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	; (8006e48 <_read_r+0x20>)
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fa f87a 	bl	8000f30 <_read>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_read_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_read_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	24000250 	.word	0x24000250

08006e4c <_fstat_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	; (8006e6c <_fstat_r+0x20>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	f7fa f8ae 	bl	8000fba <_fstat>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d102      	bne.n	8006e68 <_fstat_r+0x1c>
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	b103      	cbz	r3, 8006e68 <_fstat_r+0x1c>
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	bf00      	nop
 8006e6c:	24000250 	.word	0x24000250

08006e70 <_isatty_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d06      	ldr	r5, [pc, #24]	; (8006e8c <_isatty_r+0x1c>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	f7fa f8ad 	bl	8000fda <_isatty>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_isatty_r+0x1a>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_isatty_r+0x1a>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	24000250 	.word	0x24000250

08006e90 <_init>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	bf00      	nop
 8006e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e96:	bc08      	pop	{r3}
 8006e98:	469e      	mov	lr, r3
 8006e9a:	4770      	bx	lr

08006e9c <_fini>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr
